<apex:page id="pg" controller="OrderProcessingSolutionNew" sidebar="false" showHeader="false">
    <!--[if lt IE 8]>
    <script>
    alert('The functionality is not supported on this browser . please upgrade or use firefox, chrome or safari');
    </script>
    <![endif]-->
    
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.11.3/jquery-ui.min.js"></script>
    <link rel="stylesheet" href="https://ajax.googleapis.com/ajax/libs/jqueryui/1.11.3/themes/smoothness/jquery-ui.css" />
   <!-- <apex:includeScript value="/soap/ajax/15.0/connection.js"/>
    <apex:includeScript value="/soap/ajax/15.0/apex.js"/>-->
    <apex:includeScript value="{!URLFOR($Resource.ext, 'ext5/ext-all.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ext, 'ext5/ext-theme-gray.js')}"/> 
    <apex:stylesheet value="{!URLFOR($Resource.ext, 'ext5/ext-theme-gray-all.css')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ext, 'ext5/MultiSelect.js')}"/> 
    <!--link rel="stylesheet" type="text/css" href="https://cdn.sencha.com/ext/gpl/5.0.0/resources/css/ext-all-crisp.css"/>-->
    <apex:includeScript value="https://ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.js" />
    <apex:includeScript value="https://ajax.googleapis.com/ajax/libs/jqueryui/1.10.0/jquery-ui.min.js" />
    <!--<apex:styleSheet value="http://ajax.googleapis.com/ajax/libs/jqueryui/1.10.0/themes/smoothness/jquery-ui.css" />!-->
     <script src="../../soap/ajax/39.0/connection.js" type="text/javascript"></script>
     <link href = "https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css" rel = "stylesheet"/>
      <script src = "https://code.jquery.com/jquery-1.10.2.js"></script>
      <script src = "https://code.jquery.com/ui/1.10.4/jquery-ui.js"></script>
     
    <style>
   
     .x-form-item-body > .x-form-trigger-wrap {
      height: 67%;
      }
      
      /*.x-form-invalid-field-default {
  background-color: white;
  background-image: url(images/grid/invalid_line.gif);
  background-repeat: repeat-x;
  background-position: bottom;
}
    
     .x-form-text-default {
  color: black;
  padding: 1px 3px 2px 3px;
  background-color: white;
  background-image: url(images/form/text-bg.gif);
  font: normal 12px/17px tahoma,arial,verdana,sans-serif;
  min-height: 20px;
}

.x-form-text {
  border: 0;
  margin: 0;
  -webkit-border-radius: 0;
  -moz-border-radius: 0;
  -ms-border-radius: 0;
  -o-border-radius: 0;
  border-radius: 0;
  display: block;
  background: repeat-x 0 0;
  width: 100%;
  height: 100%;
}*/
     @font-face{
    
            font-family: vgnVerizonApexBook;
            src: url("{!URLFOR($Resource.VerizonApexBook)}");
        }
        
        @font-face{
    
            font-family: vgnVerizonApexBook_IE;
            src: url("{!URLFOR($Resource.VerizonApexBookEOT)}");
        }
         @font-face{
    
            font-family: vgnVerizonApexBook_WOFF;
            src: url("{!URLFOR($Resource.VerizonApexBookWOFF)}");
        }
 
    #title1{
      font-family: vgnVerizonApexBook,vgnVerizonApexBook_IE,vgnVerizonApexBook_WOFF,Arial,sans-serif !important;
      font-size: 24px !important;
      display: block;
      color:black;
      padding-left:5px;
      }

     #subtitle1{
      font-family: vgnVerizonApexBook,vgnVerizonApexBook_IE,vgnVerizonApexBook_WOFF,Arial,sans-serif !important;
      font-size: 20px !important;
      display: block;
      color:black;
      padding-left:5px;
      }
    
    #submit-btnInnerEl{
    
    margin-left: -4px;
    width: 86px;
    
    }
    #addVehicleButton-btnInnerEl{
    margin-left: -4px;
     width: 204px;
    }
    
    #udateVehicleButton-btnInnerEl{
    margin-left: -4px;
     width: 200px;
    }
    
    .child-row .x-grid-cell { 
    //background-color: #ffe2e2; 
    background-color: #B0B0B0; 
    color: #ededed;
    //color: #900; 
    } 
 
    .adult-row .x-grid-cell { 
    //background-color: #e2ffe2; 
    //color: #090; 
    }
    #panel-1111-body
    {
        border-style:none;
    }
    #progressbar
    {
        border-style: solid;
        background-color: rgb(241, 241, 241);
    }
    .ui-progressbar {
    position: relative;
    }
    .progress-label {
    position: absolute;
    left: 42%;
    top: 4px;   
    }
    .ui-progressbar .ui-progressbar-value {
      margin: 0px;
      }
    .myDisabledClass input1{
              opacity: .3;
              -moz-opacity: .3;
              filter: alpha(opacity=30);
     } 
     
     .buttonClass {
        background:transparent url({!URLFOR($Resource.TOaImages, 'TOaImages/button_icon_9.png')}) no-repeat top left;
    }
     .my-class {width:270px;
         }
    
      ul li, ol li {
      margin-left: 0.3em;
      }
     #title-1165-textEl
     {
         color: #585858;
         font-weight: 600;
     }
     .x-boundlist-item img.chkCombo {
            background: transparent url({!URLFOR($Resource.ext,'ext5/')}default-unchecked.png);
            width: 16px;
            height: 16px; 
        }
        .x-boundlist-selected img.chkCombo{
            background: transparent url({!URLFOR($Resource.ext,'ext5/')}default-checked.png);
            width: 16px;
            height: 16px;
        }
        x-combo-list-wrap .x-combo-list-item  {
        white-space:normal !important;
        }
        .x-combo-list-item  {
          white-space:normal;
        }
     #title-1166-textEl
     {
         color:#585858
     }
     #title-1167-textEl
     {
         color:#585858
     }
     #title-1168-textEl
     {
         color:#585858
     }
     #title-1170-textEl
     {
         color:#585858
     }
     #title-1170-textEl
     {
         color:#585858
     }
     #title-1171-textEl
     {
         color:#585858
     }
     #title-1172-textEl
     {
         color:#585858
     }
     #title-1173-textEl
     {
         color:#585858
     }
     #title-1174-textEl
     {
         color:#585858
     }
     #title-1175-textEl
     {
         color:#585858
     }
     #title-1174
     {
        color:#585858
     }
   
     #textfield-1010-labelEl
     {
        color:#484848;
        font-size:11.5px;
     }
     #textfield-1011-labelEl
     {
        color:#484848;
        font-size:11.5px;
     }
     #textfield-1012-labelEl
     {
        color:#484848;
        font-size:11.5px;
     }
      
     
    .ui-widget-content {
        background: #F1F1F1;
    }
    
     #textarea-1042-triggerWrap
    {
      height:100%
    }
    .x-toolbar-footer .x-toolbar-item {
     margin: 0px 6px 0px 0px;
     background: transparent;
     }
     
     .x-panel-body-default {
     background: transparent;
     //border-color: red;
     }
     #panel-1079-body 
     {
        //border-color: transparent;
     }
     
     #panel-1027 
     {
        border-style:none;
     }
     
     #panel-1014-body
     {
         border-style: none;
     }
     
     #panel-1016-body
     {
         border-style: none;
     }
     
     #panel-1022-body
     {
         border-style: none;
     }
      #panel-1018-body
     {
         border-style: none;
     }
     
      #panel-1020-body
     {
         border-style: none;
     }
     
     .x-table-layout-cell
     {
        color:black;
     }
     #label-1097
     {
        color:#585858;
        font-size:11px;
     }
     #label-1104
     {
        color:grey;
     }
     #label-1105
     {
        color:grey;
     }
     #label-1106
     {
        color:grey;
     }
     #label-1107
     {
        color:grey;
     }
     #label-1108
     {
        color:grey;
     }
     #label-1109
     {
        color:grey;
        font-size:11px;
     }
     #label-1110
     {
        color:grey;
        font-size:11px;
     }
     #label-1111
     {
        color:grey;
        font-size:11px;
     }
     #label-1112
     {
        color:grey;
        font-size:11px;
     }
     #label-1113
     {
        color:grey;
        font-size:11px;
     }
   
    
     #button-1028
     {
        margin-left:33%;
        background:transparent;
     }
    
     #panel-1025
     {
        border-style:none;
     }
      #panel-1026
     {
        border-style:none;
     }
     
      #button-1114
     {
        margin-left:70px;
     }
     
     #button-1097
     {
        //background:transparent;
        margin-left:70px;
     }
     
     
     .grayText {
                //color: rgba(0, 0, 0, 0.41);
                font-size: 11px;
                //font-weight: 300;
                //font-family: helvetica,arial,verdana,sans-serif;
                //font-style: italic;
            }
    #panel-1161-body
     {
         border-color:transparent;
     }
   
    
    </style>
    <table width="100%" border="0" cellspacing="0" cellpadding="0">  
        <tr>
            <td style="width:8%">
                <!--img id="j_id0:theImage" width="100" height="95" style="padding-left: 130px;" src="/resource/1423481310000/images/images/logo.png"></img>-->
                <!--apex:image id="theImage" value="{!URLFOR($Resource.images, 'images/logo.png')}" width="100" height="95" style="padding-left: 130px;"/>-->
                <apex:image url="{!URLFOR($Resource.TOaImages, 'TOaImages/logo.png')}" width="148" height="55" style="padding-left: 20px"/>
                 
            </td>
               
            <td width="18%"><br/><br/><br/><label id="title1"><b>Networkfleet</b></label><label id="subtitle1"><b>Installation Order Detail System</b></label></td>
            <td width="55%"/>
            <td style="padding-top:20px"><img id="first" src="{!URLFOR($Resource.TOaImages,
                  'TOaImages/bc1_r.png')}"/><div style="padding-left:8px;padding-top:5px;font-size:11px">Order<div style="padding-left:7px;font-size:11px">Info</div></div></td>
            <td style="padding-top:20px"><img id="second" src="{!URLFOR($Resource.TOaImages,
                  'TOaImages/bc2_g.png')}"/><div style="padding-left: 0px;padding-top:5px;font-size:11px;width: 70px;margin-left: -8px;">Order Details</div><div style="padding-left:7px;font-size:11px">Input</div></td>
            <td style="padding-top:20px"><img id="third" src="{!URLFOR($Resource.TOaImages,
                  'TOaImages/bc3_g.png')}"/><div style="padding-left:4px;padding-top:5px;font-size:11px">Service</div><div style="padding-left:2px;font-size:11px">Location</div></td>
            <td style="padding-top:20px"><img id="fourth" src="{!URLFOR($Resource.TOaImages,
                  'TOaImages/bc4_g.png')}"/><div style="padding-left:4px;padding-top:5px;font-size:11px">Vehicle<div style="padding-left:7px;font-size:11px">Info</div></div></td>
            <td style="padding-top:23px"><img id="fifth" src="{!URLFOR($Resource.TOaImages,
                  'TOaImages/bc5_g.png')}"/><div style="width:78px;height:34px;position:relative;top:10px;font-size:11px">Complete</div></td>
                    
     
        </tr>
    </table>
    <br/>
        
    <div id="from-from" style="width:450px;border-style:none;display:none;"> 
     
      <div style="padding-top:20px;border-style:none;font-size: 15px;font-family: sans-serif;"><a id="mylink" style="color:rgb(45, 136, 224);" href="{!URLFOR($Action.Document.Download, documentURL)}" download ="Vehicle_Template">Click here</a><font style="color: #909090;"> to download vehicle template</font></div><br/>
          <apex:form id="frm" enctype="multipart/form-data" target="next" onsubmit="formSubmiited()">
          
          <div> 
            
          <apex:inputFile value="{!attachment.body}" filename="{!attachment.name}" id="file1" onchange="check(this)"/>

          
         <!--   <apex:inputText value="{!attachment.description}" id="description" size="34"/>  --></div><br/>
          
          <div>
          <apex:commandButton value="Upload file"  action="{!upload1}" styleClass="buttonClass" style="width:75px" id="uploadbtn"/> 
          </div><br/><br/>
          <!-- <apex:actionFunction action="{!CallWebService}" name="CallWebService_JS" status="Status2"/>  -->
          <div id="progressbar"><div class="progress-label">Loading...</div></div>
          </apex:form>
        </div>
    <div id="gridSpace" style="width:w,height:h;padding-left;2%"></div> 
     
    <script type="text/javascript">
    var numb = 5;
    $("#mylink").click(function()
    {
       numb=4;
    });
    window.onbeforeunload = function () {
    
    if(numb==5)
    return  "";
    
    }; 
    
    var isfileSelected=false;
     var inputfileDomID;
 
   function check(obj) {      
        var path = obj.value;
        if(path.trim()!='')
        {
            var ext = path.substring(path.lastIndexOf('.') + 1);            
            if(ext.toLowerCase() !="csv")
            {
                if(ext.toLowerCase() =="xls" || ext.toLowerCase() =="xlsx" || ext.toLowerCase() =="xlsm" )
                     Ext.Msg.alert('status','please save as .csv and upload');
                else     
                    Ext.Msg.alert('status','Please use download template to upload and retry');
                isfileSelected=false;
                obj.value = null;
               
                return false;
            }
            isfileSelected=true;
        }else{
            isfileSelected=false;
        }
    }

    
    function loadform()
    {
     //alert('inside load form');
    
      $($('#from-from').contents()).appendTo('#myform-apex')     
  
    }
    var submitted=false;
    var isValidate=false;
    var failed=false;
    

    
    function loaded()
    {
    
     
     //alert(document.getElementById('iframe_id').contentWindow.document.body.innerHTML);
        // console.log('*****Entered Loaded*****');
      if(submitted)
         {   
            var progressbar = $( "#progressbar" ),
            progressLabel = $( ".progress-label" );         
             var s=document.getElementById('iframe_id').contentWindow.document.body.innerHTML;
             // console.log('s');
             //console.log(s);
             //alert('s is '+s);
             if(s=="true")
             {
                 //alert("uploaded");
                  progressbar.progressbar( "value", 100 );
             } else if(s=="false"){
                failed=true;
                progressbar.progressbar( "option", "value", 100 );
                progressLabel.text( 'failed' );
                Ext.Msg.alert('status','Please download the template to populate vehicle records and retry');
                  
             } else if(s=="limit exceeded"){
                failed=true;
                progressbar.progressbar( "option", "value", 100 );
                progressLabel.text( 'failed' );
                Ext.Msg.alert('status','file exceeded the maximum limit');
                  
             } else if(s=="Mandatory field missing"){
                failed=true;
                progressbar.progressbar( "option", "value", 100 );
                progressLabel.text( 'failed' );
                Ext.Msg.alert('status','The file you are trying to upload is missing one or more required columns in one or more rows. <br><br>Required Columns: CITY | CONTACT NAME | DEVICE TYPE | EMAIL | GARAGE NICKNAME |GARAGED ADDRESS |HARNESS TYPE ORDERED |INSTALL TYPE |MAKE |MODEL |PHONE |STATE/ PROVINCE |VEHICLE ID (NEW) |VIN ');
             } else if(s=="no data"){
                failed=true;
                progressbar.progressbar( "option", "value", 100 );
                progressLabel.text( 'failed' );
                Ext.Msg.alert('status','There is no data in the attachment');
             } else if(s=="columns missing"){
                failed=true;
                progressbar.progressbar( "option", "value", 100 );
                progressLabel.text( 'failed' );
                Ext.Msg.alert('status','Headers are not matching');
             } else if(s=="OrderNumberMissing"){
                failed=true;
                progressbar.progressbar( "option", "value", 100 );
                progressLabel.text( 'failed' );
                Ext.Msg.alert('status','Order number is missing');    
             } else if(s=="IncorrectOrderNumber"){
                failed=true;
                progressbar.progressbar( "option", "value", 100 );
                progressLabel.text( 'failed' );
                Ext.Msg.alert('status','Incorrect Order Number');      
             } else{
                failed=true;
                progressbar.progressbar( "option", "value", 100 );
                progressLabel.text( 'failed' );
                Ext.Msg.alert('status','Unexpected error');    
                 
             }
         }

      
    }
    
    function progress() {
        var progressbar = $( "#progressbar" ),
            progressLabel = $( ".progress-label" );
        //console.log('progressbar');
        // console.log(progressbar);
        //console.log('progressLabel');
        // console.log(progressLabel);
        // console.log('failed');
        // console.log(failed);
        
        
        if(failed == false)
        {
            var val = progressbar.progressbar( "value" ) ;
            //console.log('val');
            //console.log(val);
            if(val>=0){
                
                if ( val < 100 ) {
                    if(failed==false)
                    {
                        progressbar.progressbar( "value", val + 2 );
                        
                        setTimeout( progress, 80 );
                    }
                }
            }
        }
        
    } 
    
    function formSubmiited()
    {
        var progressbar = $( "#progressbar" ),
            progressLabel = $( ".progress-label" );
        //console.log('progressbar');
        //console.log(progressbar);
        //console.log('progressLabel');
        //console.log(progressLabel);
        //console.log('isfileSelected');
        //console.log(isfileSelected);
        if(isfileSelected==true)
        {
        progressbar.progressbar( "option", "value", 0 );
        progressLabel.text( '' );
            //console.log('Progress called');
          progress();
          submitted=true;
       }
        else
           Ext.Msg.alert('status','please choose the file!!');  
          
    } 
    $(function() {
    
    var progressbar = $( "#progressbar" ),
      progressLabel = $( ".progress-label" );
    $( "#progressbar" ).progressbar({
        value: false,
       
       change: function() {
        progressLabel.text( progressbar.progressbar( "value" ) + "%" );
      },
      complete: function() {
        progressLabel.text( "Complete!" );
      }
      
    });
    progressbar.progressbar( "value", 0);
    progressLabel.text( '' );
   
  });
    
        
    function SwitchPic(pic, newImageName) {
         loadform();
        var folderString = "TOaImages";
        var currentImagePath = pic.src ;       
        var n = currentImagePath.lastIndexOf(folderString);
        var lenOfFolderStr = folderString.length;       
        var commonString = currentImagePath.substr(0, lenOfFolderStr +n+1 );       
        var newImagePath = commonString.concat(newImageName);    
        pic.src = newImagePath;       
     }     
     
     function SwitchPic1(pic, newImageName) {  
        var folderString = "TOaImages";
        var currentImagePath = pic.src ;       
        var n = currentImagePath.lastIndexOf(folderString);      
        var lenOfFolderStr = folderString.length;       
        var commonString = currentImagePath.substr(0, lenOfFolderStr +n+1 );       
        var newImagePath = commonString.concat(newImageName);    
        pic.src = newImagePath;
       
     }
  

     //IT-698 - Fix - Begin
    function decodeHtml(html) {
        var txt = document.createElement("textarea");
        txt.innerHTML = html;
        return txt.value;
    }
    //IT-698 - Fix - End
     function myFunction(sel) {
         
        var opts = [], opt;
        removePicklistOptionWhenBalaceZero();
        var count=0;
        locList=[];
        
        for (var i=0, len=sel.options.length; i<len; i++) {
        opt = sel.options[i];
        
        if ( opt.selected )
        {
         
         opts.push(opt.value);  
         count++;
         // Fix for IT-548 - Begin
         //locList.push(opt.value);
         locList.push(opt.innerHTML);
         // Fix for IT-548 - End
         
        }
        
        }
        
       if(count == 1)
       {

       checkForAddEnable();
       Ext.getCmp('vehfrm').enable();
       Ext.getCmp('hwdfrm').enable();
      // Ext.getCmp('addVehicleButton').enable(); 
       //Ext.getCmp('dispalyInGrid').disable();
       Ext.getCmp('displayInGrid').disable();
       Ext.getCmp('deleteVeh').disable();
       locList1=[];
       for (var i=0, len=sel.options.length; i<len; i++) {
        opt = sel.options[i];
        
        if ( opt.selected )
        {
         //Fix for IT-548 - Begin
         //locList1.push(opt.value);
         locList1.push(opt.innerHTML);
         //Fix for IT-548 - End
        }
        
        }
         for(var i=0;i<locList.length;i++)
                        {
                          
                          //IT-698 - Fix - decodeHTML
                          var locIndex = LocationStore.find('LocationName',decodeHtml(locList[i]));

                          var tem = LocationStore.getAt(locIndex).data.vehicles;
                          if(tem instanceof Array)
                           {
                                 var a1=[];                     
                                 for(var i = 0; i < tem.length; i++) {
                                     var record = tem[i];
                                     a1.push(record);
                                 } 
                                  
                                
                                 VehicleStore.loadData(a1); 
                                
                           }
                           else
                           {
                                var a1=[];
                                VehicleStore.loadData(a1);
                           }
                        }
                         for(var n=0;n<VehicleStore.getCount();n++)
                                 {
                                    VehicleStore.getAt(n).set('LocationName',LocationStore.getAt(locIndex).data.LocationName);
                                 }   
        
       }
       else
       {
         Ext.getCmp('vehfrm').disable();
         Ext.getCmp('hwdfrm').disable();    
         Ext.getCmp('addVehicleButton').disable();
         Ext.getCmp('displayInGrid').enable();
         Ext.getCmp('toaVehicle').getStore().removeAll();
         Ext.getCmp('toaVehicle').getStore().sync();
         Ext.getCmp('deleteVeh').disable();
       }
       Ext.getCmp('vehfrm').reset();
       Ext.getCmp('hwdfrm').reset();
         
        
     }
      
     var w;
     var h;
     var reducedWidth;
     var reducedWidth1;
     var buttonflag;
    
      var locList=[];
     var locList1=[];
     var cardnumber;
     //var thankUMsg='';
    Ext.ns("Ext.TOA"); 
    Ext.onReady(function(){
   
        delete Ext.tip.Tip.prototype.minWidth;
         if (Ext.isIE8 || Ext.isIE9 || Ext.isIE10 || Ext.isIE11) {
         
         document.body.style.zoom="100%";
        
         
        Ext.override(Ext.tip.Tip, {
            minWidth: 200
        });
       }

        Ext.override(Ext.menu.Menu, {
    onMouseLeave: function(e) {
    var me = this;


    // BEGIN FIX
    var visibleSubmenu = false;
    me.items.each(function(item) { 
        if(item.menu && item.menu.isVisible()) { 
            visibleSubmenu = true;
        }
    })
    if(visibleSubmenu) {
        //console.log('apply fix hide submenu');
        return;
    }
    // END FIX


    me.deactivateActiveItem();


    if (me.disabled) {
        return;
    }


    me.fireEvent('mouseleave', me, e);
    }
});
        //document.getElementById('from-from').style.display="none";
       // 
       
        w = $(window).width();
        h = $(window).height();
        var d = new Date();
        var currentYear = d.getFullYear();
        reducedWidth=w-216+"px";
        reducedWidth1=w-110+"px";
        Ext.tip.QuickTipManager.init();
        
       // var param='a0Ge00000028WIy';
        var param = '{!$CurrentPage.parameters.id}';
        var info;
        var sppingAddress;
        Ext.state.Manager.setProvider(Ext.create('Ext.state.CookieProvider'));
        
          OrderProcessingSolutionNew.getLocationsAndVeh(param,function(result1, event){ //This method is used to call our controller method
                                         if(event.type == 'exception') {
                                             //console.log('exception');
                                            return;
                                         }   
                                        var res = Ext.decode(result1);  
                                        if(res!=null && res!=undefined && (res instanceof Array))
                                        {                                        
                                            LocationStore.loadData(res);   
                                            var data = [];
                                            LocationStore.each(function(r){
                                            data.push(r.data.LocationName);
                                            });
                                            checkForSubmitEnable();
                                            $("#opt").empty();
                                            $.each(data,function(index,val)
                                            {
                                                $("#opt").append('<option>'+val+'</option>');
                                            });  
                                        }                                
                                    }, {escape:false});   
          function navigateToCard()
          {   
                loadText = 'Loading... Please wait';
                Ext.getBody().mask(loadText, 'loading');                        
                Ext.getBody();                     
        OrderProcessingSolutionNew.getCardNumber(param,function(result, event){
                                        if(event.type == 'exception') {
                                            //console.log('exception');
                                            Ext.getBody().unmask(); Ext.getBody();
                                            return;
                                         }  
                                        if(result==2)
                                        {
                                            SwitchPic(document.getElementById( 'third' ),"bc3_r.png");
                                             SwitchPic1(document.getElementById( 'first' ),"bc1_g.png");
                                             Ext.getCmp("theCardWizard").getLayout().setActiveItem(2);
                                             //Ext.getCmp('move-prev')['enable']();
                                              $("#back").show();
                                              $("#save").show().css('left',reducedWidth);
                                              $("#next").show();
                                              $("#submit").hide();
                                              $("#cancel").hide();   
                                        }
                                        if(result==3)
                                        {
                                            SwitchPic(document.getElementById( 'fourth' ),"bc4_r.png");
                                            SwitchPic1(document.getElementById( 'first' ),"bc1_g.png");             
                                            Ext.getCmp('theCardWizard').getLayout().setActiveItem(3);
                                            //Ext.getCmp('move-prev')['enable']();
                                            $("#back").show();
                                            $("#submit").show().css("left",reducedWidth1); 
                                            $("#save").show().css("left",reducedWidth); 
                                            $("#cancel").hide(); 
                                            $("#next").hide(); 
                                        }
                                      
                                        Ext.getBody().unmask(); Ext.getBody();
             }, {escape:false});
          
            }
            navigateToCard();
         OrderProcessingSolutionNew.getPrimaryDevices(param,function(result, er){ //This method is used to call our controller method
                                        if(er.type == 'exception') {
                                            //console.log('exception');
                                            return;
                                         }   
                                        var res = Ext.decode(result);  
                                        if(res!=null && res!=undefined && (res instanceof Array))
                                        {   
                                           //alert(result);
                                            primaryDeviceStore.loadData(res);
                                         }   
                                        }, {escape:false});
        
            
        OrderProcessingSolutionNew.getSecondaryDevices(param,function(result, er){ //This method is used to call our controller method
                                           if(er.type == 'exception') {
                                               //console.log('exception');
                                            return;
                                         }   
                                        var res = Ext.decode(result);  
                                        if(res!=null && res!=undefined && (res instanceof Array))
                                        {     
                                            secondaryDeviceStore.loadRawData(res); 
                                         }    
                                        }, {escape:false});
        OrderProcessingSolutionNew.getFuelType(param,function(result, er){ //This method is used to call our controller method
                                          if(er.type == 'exception') {
                                              //console.log('exception');
                                            return;
                                         }   
                                        var res = Ext.decode(result);  
                                        if(res!=null && res!=undefined && (res instanceof Array))
                                        {   
                                           
                                            fuelTypeStore.loadData(res);
                                         }   
                                        }, {escape:false});
                                        
        OrderProcessingSolutionNew.getInstallTypes(param,function(result, er){ //This method is used to call our controller method
                                          if(er.type == 'exception') {
                                              //console.log('exception');
                                            return;
                                         }   
                                        var res = Ext.decode(result);  
                                        if(res!=null && res!=undefined && (res instanceof Array))
                                        {   
                                           
                                            InstallTypeStore.loadData(res);
                                         }   
                                        }, {escape:false});
        OrderProcessingSolutionNew.getLicenseState(param,function(result, er){ //This method is used to call our controller method
                                            if(er.type == 'exception') {
                                                //console.log('exception');
                                            return;
                                         }   
                                        var res = Ext.decode(result);  
                                        if(res!=null && res!=undefined && (res instanceof Array))
                                        {   
                                           
                                            LicenseStateStore.loadData(res);
                                         }   
                                        }, {escape:false});                               
        
        OrderProcessingSolutionNew.getStateCountryvalues(function(result3, er){
                                    if(er.type == 'exception') {
                                        // console.log('exception');
                                            return;
                                         }   
                                   var res = Ext.decode(result3);
                                   CountryStateStore.loadRawData(res);
                                   Ext.getCmp('locfrmContry').setValue('USA');
                                   data=[];
                                   for(var i=0; i<res.length; i++) { 
                                    for(var j=0;j<res[i].dependentvalues.length;j++){
                                        data.push({"country":res[i].controlValue,"state":res[i].dependentvalues[j]});
                                    }
                                   } 
                                   var st1=JSON.stringify(data);
                                   StateStore.loadRawData(Ext.decode(st1)); 
                                 }, {escape:false});
        
        OrderProcessingSolutionNew.getShipingInfo(param,function(result, er){ //This method is used to call our controller method
                                        if(er.type == 'exception') {
                                            //console.log('exception');
                                            return;
                                         }   
                                        sppingAddress=result;
                                        document.getElementById("sppingAddress").innerHTML = sppingAddress;
                                        document.getElementById("sppingAddress1").innerHTML = sppingAddress;
                                        document.getElementById("sppingAddress2").innerHTML = sppingAddress;
                                        document.getElementById("sppingAddress3").innerHTML = sppingAddress;   
                                        document.getElementById("sppingAddress5").innerHTML = sppingAddress;                                
                                    }, {escape:false});
                                 
        OrderProcessingSolutionNew.getPurchasedService(param,function(result1, er){ //This method is used to call our controller method
                                       if(er.type == 'exception') {
                                           //console.log('exception');
                                            return;
                                         }   
                                        var res = Ext.decode(result1);  
                                        if(res!=null && res!=undefined && (res instanceof Array))
                                        {   
                                        PurchasedServiceStore.loadRawData(res);    
                                                                                                                          
                                        }
                                    }, {escape:false});
       /***Commented and placed at different lines below - Begin
       OrderProcessingSolutionNew.getOrder(param,function(result, er){ //This method is used to call our controller method
                                 
                                         if(result == 'fail')
                                         {
                                          Ext.Msg.alert('Invalid Order','Please use the link provided by Networkfleet to update your order');
                                          $("#cancel").hide();
                                          $("#next").hide();
                                         } 
                                        var res = Ext.decode(result);                                                                
                                        OrderStore.loadRawData(res); 

                                        values= OrderStore.getAt(0); 

                                        CustInfo_form.getForm().loadRecord(values);  
                                        UsrInfo_form.getForm().loadRecord(values);
                                       
                                    }, {escape:false});
        
        //Commented and placed at different lines below - End                                                                                                
        */ 
        
        OrderProcessingSolutionNew.getHarnessCategory(function(result, er){
                                   if(er.type == 'exception') {
                                            console.log('exception');
                                            return;
                                         }   
                                        var res = Ext.decode(result);  
                                        if(res!=null && res!=undefined && (res instanceof Array))
                                        {    
                                      harnessCategoryStore.loadData(res);
                                      }
                                   }, {escape:false});  
        OrderProcessingSolutionNew.getDeviceRetCategory(function(result, er){
                                   if(er.type == 'exception') {
                                            console.log('exception');
                                            return;
                                         }   
                                        var res = Ext.decode(result);  
                                        if(res!=null && res!=undefined && (res instanceof Array))
                                        {    
                                      deviceRetCategoryStore.loadData(res);
                                      }
                                   }, {escape:false});                          
                           
                                  
        
        var CustInfo_form = Ext.create('Ext.form.Panel',{               
            id:'custfrm',
            layout: {
            type: 'vbox',
            align: 'stretch'
            }
            ,width:600,
            title:'Customer',
            //padding:'200 0 0 0',
            frame:true,
            autoScroll  : true, 
            items: [
                {
                    xtype: 'textfield',
                    fieldLabel: 'Company Name',
                    name: 'name',
                    dataIndex:'name',
                    allowBlank: false,
                    disabled: true,
                    disabledCls: 'myDisabledClass',
                    anchor: '100%',
                    margin: '15 15 15 15'
                    
                    
                },{
                    xtype: 'textfield',
                    fieldLabel: 'Company Address',
                    name: 'address',
                    dataIndex:'address',
                    allowBlank: false,
                    disabled: true,
                    disabledCls: 'myDisabledClass',
                    anchor: '100%',
                    margin: '15 15 15 15'
                },{
                    xtype: 'textfield',
                    fieldLabel: 'Company Phone',
                    name: 'phone',
                    dataIndex:'phone',
                    allowBlank: false,
                    disabled: true,
                    disabledCls: 'myDisabledClass',
                    anchor: '100%',
                    margin: '15 15 15 15'
                }
            ]

        });//CustInfo_form
        
        var accMap=[];
         
        var store = Ext.create('Ext.data.ArrayStore', {
            fields: [
              {name: 'id'},
              {name: 'Label'}
            ], 
            
            data : accMap
         });


         var param1 = '{!$CurrentPage.parameters.id}';   
             
         Visualforce.remoting.Manager.invokeAction(
              '{!$RemoteAction.OrderProcessingSolutionNew.getAccount}',
              param1,                                      
              function accountSearch(result, event){
                  if(event.type == 'exception'){
                      console.log('exception');
                      return;
                  }else{
   
                      var records = result;

                      var counter=0;
                            
                      for(i = 0; i < records.length ; i++) 
                      {
                          var id= records[i].Id;
                          var Label=records[i].Name;
                          accMap.push([id,Label]);     
                      }

                  }
                    
                  store.loadData(accMap);

                  
                  
                 OrderProcessingSolutionNew.getOrder(param,function(result, er){ //This method is used to call our controller method

                                         if(result == 'fail')
                                         {
                                          Ext.Msg.alert('Invalid Order','Please use the link provided by Networkfleet to update your order');
                                          $("#cancel").hide();
                                          $("#next").hide();
                                         } 
                                        var res = Ext.decode(result);                                                                
                                        OrderStore.loadRawData(res); 

                                        values= OrderStore.getAt(0); 

                                        CustInfo_form.getForm().loadRecord(values);  
                                        UsrInfo_form.getForm().loadRecord(values);
                                       
                                    }, {escape:false});
          });
                 
        var UsrInfo_form = Ext.create('Ext.form.Panel',{               
            id:'Usrfrm',
            layout: {
            type: 'vbox',
            align: 'stretch'
            }
            ,width:600,
            title:'Contact Info',
            //padding:'200 0 0 0',
            frame:true,
            autoScroll  : true, 
            items: [
                {
                    xtype: 'textfield',
                    fieldLabel: 'Name',
                    name: 'usrname',
                    id: 'usrname',
                    dataIndex:'usrname',                    
                    allowBlank: false,
                    //disabled: true,
                    //disabledCls: 'myDisabledClass',
                    anchor: '100%',
                    margin: '15 15 15 15',
                   handler:function(){
                    var ddd = Ext.getDom('usrname');
                    //alert(ddd.value);
                    }
                        
                },{
                    xtype: 'textfield',
                    fieldLabel: 'Email',
                    name: 'Email',
                    id: 'usremail',
                    dataIndex:'usremail',
                    allowBlank: false,
                    vtype:'email',
                    //disabled: true,
                    //disabledCls: 'myDisabledClass',
                    anchor: '100%',
                    margin: '15 15 15 15',
                    
                   handler:function(){
                    var ddd = Ext.getDom('usremail');
                    //alert(ddd.value);
                    }
                },{
                    xtype: 'textfield',
                    fieldLabel: 'Phone',
                    name: 'usrphone',
                    id: 'usrphone',
                    dataIndex:'usrphone',
                    allowBlank: false,
                    //disabled: true,
                    //disabledCls: 'myDisabledClass',
                    anchor: '100%',
                    margin: '15 15 15 15',
                   handler:function(){
 
                    var ddd = Ext.getDom('usrphone');
                    //alert(ddd.value);
                    }
                }, {
                    xtype: 'combobox',
                    fieldLabel: 'Child Account',
                    name: 'childacc',
                    id: 'childacc',
                    dataIndex:'childacc',
                    allowBlank: false,

                    //disabled: true,
                    //disabledCls: 'myDisabledClass',
                    anchor: '100%',
                    margin: '15 15 15 15',
                    queryMode: 'local',
                    minChars  : 2,
                    store     :  store,
                    valueField    : 'id', 
                    triggerAction : 'all', 
                    hideTrigger   : true,
                    editable : true,
                    typeAhead : true,
                    forceSelection : true,
                    disableKeyFilter : true,
                    triggerAction : 'all',
                    mode : 'local' ,
                    displayField  : 'Label' ,
                      
                    listeners:{
                        afterrender:function(cmp){                              
                            cmp.inputEl.set({
                                autocomplete:'on',
                                style: 'z-index: 900;'
                            });
                            <!-- Added Below Code to Conditionally Render Child Account Field : IT-1601 - Sunil Kumar-->
                            var param1 = '{!$CurrentPage.parameters.id}';
                             Visualforce.remoting.Manager.invokeAction(
                                  '{!$RemoteAction.OrderProcessingSolutionNew.getCount}',
                                  param1,                                      
                                  function accountSearched(result, event){
                                      if(event.type == 'exception'){
                                          console.log('exception****'+result);
                                          return;
                                      }
                                      else{
                                              var records = result;
                                              if(records > 0){
                                                  Ext.getCmp('childacc').enable();
                                              }
                                              else{
                                                  var isIE = /*@cc_on!@*/false || !!document.documentMode;
                                                  
                                                  if(isIE){
                                                      $.noConflict();
                                                      jQuery("#childacc").hide();
                                                        jQuery(document).ready(function(){
                                                                jQuery("#childacc").hide();
                                                            });
                                                            
                                                  }
                                                  else{
                                                      document.getElementById("childacc").innerHTML = '';
                                                  }
                                          }
                                      }
                              });
                            <!-- End of Code Update : IT-1601 -->
                        }, 
                        select : function() {
                            var store = this.store;      
                            store.clearFilter();             
                            store.filter({
                                property: 'Label',
                                anyMatch: true,
                                value   : this.getValue()
                            }); 
                        },    
                  
                        change : function() {
                            var store = this.store;      
                            store.clearFilter();             
                            store.filter({
                                property: 'Label',
                                anyMatch: true,
                                value   : this.getValue()
                            }); 
                       }      
                   }      
                }
            ]

        });//UsrInfo_form 
        
         var HeaderPanelForCardZero = Ext.create('Ext.panel.Panel', {
         
            //header : false,           
            border : false,
            bodyPadding: 0,     
           
            frame: false,  
             
            layout: {
                        type: 'hbox',
                        pack: 'top'                       
                    },         
            items: 
            [
                
                {
                
                 html:'<div id="sppingAddress" class="grayText" style="padding:0px;width:'+(w-30)+'px;text-align:right">address</div>',
                 margin:'0 0 10 0'
                 
                
                }
            ]
         });//HeaderPanel         
        var HeaderPanelForCardOne = Ext.create('Ext.panel.Panel', {
         
            //header : false,           
            border : false,
            bodyPadding: 0,     
            //width:1200,       
            //autoEl: 'center',
            frame: false,  
             //margin:'0 0 0 800', 
            layout: {
                        type: 'hbox',
                        pack: 'top'
                       
                    },         
            items: 
            [
                
                {
                
                 html:'<div id="sppingAddress1" class="grayText" style="padding:0px;width:'+(w-30)+'px;text-align:right">address</div>',
                 margin:'0 0 10 0'
                 
                
                }
            ]
         });//HeaderPanel 
         
         var HeaderPanelForCardTwo = Ext.create('Ext.panel.Panel', {
         
            //header : false,           
            border : false,
            bodyPadding: 0,     
            //width:1200,       
            //autoEl: 'center',
            frame: false,  
            width:w,
             //margin:'0 0 0 800', 
            layout: {
                        type: 'hbox',
                        pack: 'top'
                       
                    },         
            items: 
            [
                
                {
                
                 html:'<div id="sppingAddress2" class="grayText" style="padding:0px;width:'+(w-30)+'px;text-align:right">address</div>',
                 margin:'0 0 10 0'
                 
                
                }
            ]
         });//HeaderPanel 
         var HeaderPanelForCardThree = Ext.create('Ext.panel.Panel', {
         
           // header : false,           
            border : false,
            bodyPadding: 0,     
            //width:1200,       
            //autoEl: 'center',
            frame: false,  
            width:w,
             //margin:'0 0 0 800', 
            layout: {
                        type: 'hbox',
                        pack: 'top'
                       
                    },         
            items: 
            [
                
                {
                
                 html:'<div id="sppingAddress3" class="grayText" style="padding:0px;width:'+(w-30)+'px;text-align:right">address</div>',
                 margin:'0 0 10 0'
                 
                
                }
            ]
         });//HeaderPanel 
       var HeaderPanelForCardFive = Ext.create('Ext.panel.Panel', {
         
           // header : false,           
            border : false,
            bodyPadding: 0,     
            //width:1200,       
            //autoEl: 'center',
            frame: false,  
            width:w,
             //margin:'0 0 0 800', 
            layout: {
                        type: 'hbox',
                        pack: 'top'
                       
                    },         
            items: 
            [
                
                {
                
                 html:'<div id="sppingAddress5" class="grayText" style="padding:0px;width:'+(w-30)+'px;text-align:right">address</div>',
                 margin:'0 0 10 0'
                 
                
                }
            ]
         });//HeaderPanel 
        var CustInfOuterPanel = Ext.create('Ext.panel.Panel', {
            autoHeight:false,
            autoWidth:false,
            //header : false,           
            border : false,
            bodyPadding: 50, 
            //margin:'0 0 0 500',    
            //width:1500,       
            //autoEl: 'center',
            frame: false,   
            layout: {
                        type: 'hbox',
                        pack: 'center'
                    },         
            items: 
            [
                 {
                xtype : UsrInfo_form,
                 triggerAction:'all'
                }
                
            ]
         });//CustInfOuterPanel 
         
          var CardZeroPanel = Ext.create('Ext.panel.Panel', {
                
            border : false,
            //margin:'10 0 0 0',     
            frame: false, 
            autoEl: 'center',
            
            layout: {
                        type: 'vbox',
                        pack: 'top',
                        align:'center'
                    },         
            items: 
            [
                {
                    xtype : HeaderPanelForCardZero
                } ,
                {
                    xtype : CustInfOuterPanel
                    //bodyPadding:'20 0 0 0'
                }
                
            ]
           
         });//Panel1 
         
         
                
       
          
        var ButtonPanel = Ext.create('Ext.form.Panel',{
              frame:false,
              cls: 'left-right-buttons',
              //height:27,
              buttons:[
              {
                  xtype:'button',
                  text:'Back',
                  id:'back',
                  icon:'{!URLFOR($Resource.TOaImages, 'TOaImages/button_icon_9.png')}',
                  //tooltip:'Back',
                  width:100,
                  hidden:true,
                    
                  handler: function() 
                  {
                      var activeItem = Ext.getCmp('theCardWizard').getLayout().activeItem;
                      var currentIndex = Ext.getCmp('theCardWizard').items.indexOf(activeItem); 
                      Ext.getCmp('vehfrm').disable();
                      Ext.getCmp('hwdfrm').disable();
                      if(currentIndex==1)
                      {
                          SwitchPic(document.getElementById( 'first' ),"bc1_r.png");
                          SwitchPic1(document.getElementById( 'second' ),"bc2_g.png");
                          Ext.getCmp('theCardWizard').getLayout().setActiveItem(0);                          
                          $("#cancel").show();
                          $("#next").show();
                          $("#save").hide();
                          $("#submit").hide();
                          $("#back").hide();
                          
                            
                       }
                       if(currentIndex==2)
                       {
                           Ext.getCmp('theCardWizard').getLayout().setActiveItem(3);
                           SwitchPic(document.getElementById( 'second' ),"bc2_r.png");
                           SwitchPic1(document.getElementById( 'third' ),"bc3_g.png");
                           //Ext.getCmp('move-next')['enable']();
                           $("#back").show();
                           $("#save").hide();
                           $("#submit").hide();
                           $("#cancel").hide();
                           $("#next").hide();
                          
                       }   
                       if(currentIndex==3)
                       {
                           Ext.getCmp('theCardWizard').getLayout().setActiveItem(1);
                           SwitchPic(document.getElementById( 'third' ),"bc3_r.png");
                           SwitchPic1(document.getElementById( 'fourth' ),"bc4_g.png");                           
                           $("#back").show();
                           $("#save").show();
                           $("#next").show();
                           $("#cancel").hide();
                           $("#submit").hide();
                           Ext.getCmp('toaVehicle').getStore().removeAll();
                           Ext.getCmp('toaVehicle').getStore().sync();
                           
                           
                       } 
                       
                       if(currentIndex==5)
                       {   
                           
                           Ext.getCmp('theCardWizard').getLayout().setActiveItem(1);
                           
                           SwitchPic(document.getElementById( 'second' ),"bc2_r.png");
                           SwitchPic1(document.getElementById( 'fourth' ),"bc4_g.png");                           
                           $("#back").show();
                           //Ext.getCmp('next').setText('Next');
                           $("#save").hide();
                           $("#submit").hide();
                           $("#cancel").hide();
                           $("#next").hide();
                    
                       }      
                       if(currentIndex==4)
                       {
                           
                           OrderProcessingSolutionNew.getLocationsAndVeh(param,function(result1, er){ //This method is used to call our controller method
                                        var res = Ext.decode(result1);      
                                        LocationStore.loadData(res);   
                                        var data = [];
                                        LocationStore.each(function(r){
                                        data.push(r.data.LocationName);
                                        });
                                        $("#opt").empty();
                                        $.each(data,function(index,val)
                                        {
                                            $("#opt").append('<option>'+val+'</option>');
                                        });                                  
                                    }, {escape:false});  
                            
                            if(cardnumber==2)
                            {
                                
                                SwitchPic(document.getElementById( 'third' ),"bc3_r.png");
                                 SwitchPic1(document.getElementById( 'fifth' ),"bc5_g.png");
                                 Ext.getCmp("theCardWizard").getLayout().setActiveItem(2);
                                 //Ext.getCmp('move-prev')['enable']();
                                  $("#back").show();
                                  $("#save").show().css('left',reducedWidth);
                                  $("#next").show();
                                  $("#submit").hide();
                                  $("#cancel").hide();   
                            }
                            if(cardnumber==3)
                            {
                               
                                SwitchPic(document.getElementById( 'fourth' ),"bc4_r.png");
                                SwitchPic1(document.getElementById( 'fifth' ),"bc5_g.png");             
                                Ext.getCmp('theCardWizard').getLayout().setActiveItem(3);
                                //Ext.getCmp('move-prev')['enable']();
                                $("#back").show();
                                $("#submit").show().css("left",reducedWidth1); 
                                $("#save").show().css("left",reducedWidth); 
                                $("#cancel").hide(); 
                                $("#next").hide(); 
                                
                            }
                            if(buttonflag == true)
                            {
                               
                                Ext.getCmp('theCardWizard').getLayout().setActiveItem(5);
                                SwitchPic(document.getElementById( 'fourth' ),"bc4_r.png");
                                SwitchPic1(document.getElementById( 'fifth' ),"bc5_g.png");  
                                $("#back").show();
                                $("#save").hide();
                                $("#next").hide();
                                $("#submit").hide();  
                                $("#cancel").hide(); 
                                
                                buttonflag = false;
                            }
                            
                        }
                         
                         
                    }  
                   
                },
                {
                    xtype:'button',
                    id:'save',
                    text:'Save & Quit',
                    icon:'{!URLFOR($Resource.TOaImages, 'TOaImages/button_icon_7.png')}',
                    width:100,
                    //tooltip:'Save',
                    hidden:true,                    
                    handler: function() 
                    { 
                        //alert(currentIndex);
                        //IT-206 - disable buttons to avoid double clicks - to fix duplicate activities/missing vehicles - Begin
                        this.disable();
                        Ext.getCmp('submit').disable();
                        //IT-206 - disable buttons to avoid double clicks - to fix duplicate activities/missing vehicles - End
                        var activeItem = Ext.getCmp('theCardWizard').getLayout().activeItem;
                        var currentIndex = Ext.getCmp('theCardWizard').items.indexOf(activeItem); 
                        
                        var curUserNameValue = Ext.getCmp("usrname").value;
                        var curUserEmailValue = Ext.getCmp("usremail").value;
                        var curUserPhoneValue = Ext.getCmp("usrphone").value;
                         <!--added Tech M Offshore!-->
                        var curUserChildAccValue = Ext.getCmp("childacc").value;
                        
                        var jsondataLocation = getGirdDataFromStore(LocationStore); 
                        if(currentIndex == 2) 
                        {    
                         var lineItemJson = getLineItemDataFromStore(PurchasedServiceStore); 
                         var orderJson = getOrderDataFromStore(OrderStore); 
                                                 
                          Visualforce.remoting.Manager.invokeAction(
                             '{!$RemoteAction.OrderProcessingSolutionNew.saveRecord}',
                           // param,currentIndex,jsondataLocation,lineItemJson,orderJson, false,
                             param,currentIndex,jsondataLocation,lineItemJson,curUserNameValue,curUserEmailValue,curUserPhoneValue,curUserChildAccValue,  false,
                             
                            function(result, event){
                                if(event.type == 'exception') {
                                    console.log('exception');
                                    cardnumber=currentIndex;
                                    document.getElementById("thankUMsg").innerHTML = '<b>Sorry!!</b><br/>Some internal error occured please contact admin.';
                                    $("#opt").empty();
                                    Ext.getCmp('vehfrm').getForm().reset(); 
                                    Ext.getCmp('hwdfrm').getForm().reset();
                                    Ext.getCmp('toaVehicle').store.clearData();
                                    Ext.getCmp('toaVehicle').view.refresh();
                                    TOApanelLocation.store.clearData(); 
                                    TOApanelLocation.view.refresh();  
                                    var form = Ext.getCmp('locfrm').getForm();                                                   
                                    form.reset();   
                                    Ext.getCmp('locfrmContry').setValue('USA');
                                    $("#back").hide();
                                    $("#save").hide();
                                    $("#submit").hide();
                                    $("#cancel").hide();
                                    $("#next").hide();  
                                    SwitchPic(document.getElementById( 'fifth' ),"bc5_g.png");
                                    SwitchPic1(document.getElementById( 'third' ),"bc3_g.png"); 
                                    Ext.getCmp('theCardWizard').getLayout().setActiveItem(4);  
                                    return;
                                }
                                if(result==true)
                                {
                                cardnumber=currentIndex;
                                document.getElementById("thankUMsg").innerHTML = '{!$Label.Thank_you_on_Save}';
                                $("#opt").empty();
                                Ext.getCmp('vehfrm').getForm().reset(); 
                                Ext.getCmp('hwdfrm').getForm().reset();
                                Ext.getCmp('toaVehicle').store.clearData();
                                Ext.getCmp('toaVehicle').view.refresh();
                                TOApanelLocation.store.clearData(); 
                                TOApanelLocation.view.refresh();  
                                var form = Ext.getCmp('locfrm').getForm();                                                   
                                form.reset();  
                                Ext.getCmp('locfrmContry').setValue('USA'); 
                                $("#back").show();
                                $("#save").hide();
                                $("#submit").hide();
                                $("#cancel").hide();
                                $("#next").hide();                                  
                                }
                                else
                                {
                                    cardnumber=currentIndex;
                                    document.getElementById("thankUMsg").innerHTML = '<b>Sorry!!</b><br/>Some internal error occured please contact admin.';
                                    $("#opt").empty();
                                    Ext.getCmp('vehfrm').getForm().reset(); 
                                    Ext.getCmp('hwdfrm').getForm().reset();
                                    Ext.getCmp('toaVehicle').store.clearData();
                                    Ext.getCmp('toaVehicle').view.refresh();
                                    TOApanelLocation.store.clearData(); 
                                    TOApanelLocation.view.refresh();  
                                    var form = Ext.getCmp('locfrm').getForm();                                                   
                                    form.reset();   
                                    Ext.getCmp('locfrmContry').setValue('USA');
                                    $("#back").hide();
                                    $("#save").hide();
                                    $("#submit").hide();
                                    $("#cancel").hide();
                                    $("#next").hide();    
                                }
                                //IT-206 - enable buttons back - Begin
                                Ext.getCmp('save').enable();
                                Ext.getCmp('submit').enable();
                                //IT-206 - enable buttons back - End 
                                SwitchPic(document.getElementById( 'fifth' ),"bc5_g.png");
                                SwitchPic1(document.getElementById( 'third' ),"bc3_g.png"); 
                                Ext.getCmp('theCardWizard').getLayout().setActiveItem(4);
                                
                                                
                            }, 
                            {escape: true}
                         );  
                       }       
                       if(currentIndex == 3)
                       {
                             
                             var lineItemJson = getLineItemDataFromStore(PurchasedServiceStore);
                             var orderJson = getOrderDataFromStore(OrderStore); 
                             
                            var curUserNameValue = Ext.getCmp("usrname").value;
                            var curUserEmailValue = Ext.getCmp("usremail").value;
                            var curUserPhoneValue = Ext.getCmp("usrphone").value;
                             <!--added Tech M Offshore!-->
                             var curUserChildAccValue = Ext.getCmp("childacc").value;
                             
                             Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.OrderProcessingSolutionNew.saveRecord}',
                            param,currentIndex,jsondataLocation,lineItemJson,curUserNameValue,curUserEmailValue,curUserPhoneValue,curUserChildAccValue,false,
                            function(result, event){
                                if(event.type == 'exception') {
                                    console.log('exception');
                                    cardnumber=currentIndex;
                                    document.getElementById("thankUMsg").innerHTML = '<b>Sorry!!</b><br/>Some internal error occured please contact admin.';
                                    $("#opt").empty();
                                    Ext.getCmp('vehfrm').getForm().reset(); 
                                    Ext.getCmp('hwdfrm').getForm().reset();
                                    Ext.getCmp('toaVehicle').store.clearData();
                                    Ext.getCmp('toaVehicle').view.refresh();
                                    TOApanelLocation.store.clearData(); 
                                    TOApanelLocation.view.refresh();  
                                    var form = Ext.getCmp('locfrm').getForm();                                                   
                                    form.reset();   
                                    Ext.getCmp('locfrmContry').setValue('USA');
                                    $("#back").hide();
                                    $("#save").hide();
                                    $("#submit").hide();
                                    $("#cancel").hide();
                                    $("#next").hide(); 
                                    SwitchPic(document.getElementById( 'fifth' ),"bc5_g.png");
                                    SwitchPic1(document.getElementById( 'third' ),"bc3_g.png"); 
                                    Ext.getCmp('theCardWizard').getLayout().setActiveItem(4);     
                                    return;
                                }
                                if(result==true)
                                {
                                cardnumber=currentIndex;
                                document.getElementById("thankUMsg").innerHTML = '{!$Label.Thank_you_on_Save}';
                               $("#opt").empty();
                                Ext.getCmp('vehfrm').getForm().reset(); 
                                Ext.getCmp('hwdfrm').getForm().reset();
                                Ext.getCmp('toaVehicle').store.clearData();
                                Ext.getCmp('toaVehicle').view.refresh();
                                TOApanelLocation.store.clearData(); 
                                TOApanelLocation.view.refresh();  
                                var form = Ext.getCmp('vehfrm').getForm();                                                   
                                form.reset();   
                                $("#back").show();
                                $("#save").hide();
                                $("#submit").hide();
                                $("#cancel").hide();
                                $("#next").hide();   
                                }
                                else
                                {
                                    cardnumber=currentIndex;
                                    document.getElementById("thankUMsg").innerHTML = '<b>Sorry!!</b><br/>Some internal error occured please contact admin.';
                                    $("#opt").empty();
                                    Ext.getCmp('vehfrm').getForm().reset(); 
                                    Ext.getCmp('hwdfrm').getForm().reset();
                                    Ext.getCmp('toaVehicle').store.clearData();
                                    Ext.getCmp('toaVehicle').view.refresh();
                                    TOApanelLocation.store.clearData(); 
                                    TOApanelLocation.view.refresh();  
                                    var form = Ext.getCmp('locfrm').getForm();                                                   
                                    form.reset();  
                                    Ext.getCmp('locfrmContry').setValue('USA'); 
                                    $("#back").hide();
                                    $("#save").hide();
                                    $("#submit").hide();
                                    $("#cancel").hide();
                                    $("#next").hide();    
                                }
                                //IT-206 - enable buttons back - Begin
                                Ext.getCmp('save').enable();
                                Ext.getCmp('submit').enable();
                                //IT-206 - enable buttons back - End 
                                SwitchPic(document.getElementById( 'fifth' ),"bc5_g.png");
                                SwitchPic1(document.getElementById( 'fourth' ),"bc4_g.png"); 
                                Ext.getCmp('theCardWizard').getLayout().setActiveItem(4);    
                               
                                    
                                                    
                            }, 
                            {escape: true}
                         );
                       
                       }               
                         
                    
                    }      
                },
                {
                    xtype:'button',
                    hidden:true,
                    id:'submit',
                    height:22,
                    text:'<img style="float:left" src="{!URLFOR($Resource.TOaImages,'TOaImages/button_icon_3.png')}"/><img style="float:left" src="{!URLFOR($Resource.TOaImages,'TOaImages/numbers.fw.png')}"/><span style="width:50px;">Submit</span>',
                    //icon:'{!URLFOR($Resource.TOaImages, 'TOaImages/button_icon_3.png')}',
                    //icon:'{!URLFOR($Resource.TOaImages, 'TOaImages/button_icon_9.png')}',
                    //tooltip:'submit',
                    width:100,                    
                  
                    handler: function() 
                    { 
                        //IT-206 - disable buttons to avoid double clicks - to fix duplicate activities/missing vehicles - Begin
                        this.disable(); 
                        Ext.getCmp('save').disable();
                        //IT-206 - disable buttons to avoid double clicks - to fix duplicate activities/missing vehicles - End 
                        var activeItem = Ext.getCmp('theCardWizard').getLayout().activeItem;
                        var currentIndex = Ext.getCmp('theCardWizard').items.indexOf(activeItem); 
                         var jsondataLocation = getGirdDataFromStore(LocationStore); 
                         var lineItemJson = getLineItemDataFromStore(PurchasedServiceStore);
                          
                        var curUserNameValue = Ext.getCmp("usrname").value;
                        var curUserEmailValue = Ext.getCmp("usremail").value;
                        var curUserPhoneValue = Ext.getCmp("usrphone").value;                        
                         <!--added Tech M Offshore!-->
                         var curUserChildAccValue = Ext.getCmp("childacc").value;
                         Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.OrderProcessingSolutionNew.submitRecord}',
                            param,currentIndex,jsondataLocation,lineItemJson,curUserNameValue,curUserEmailValue,curUserPhoneValue,curUserChildAccValue,
                            function(result, event){
                                if(event.type == 'exception') {
                                    console.log('exception');
                                    return;
                                }
                            //IT-206 - enable buttons back - Begin
                                Ext.getCmp('submit').enable();
                                Ext.getCmp('save').enable();
                            //IT-206 - enable buttons back - End
                            SwitchPic(document.getElementById( 'fifth' ),"bc5_r.png");
                            SwitchPic1(document.getElementById( 'fourth' ),"bc4_g.png"); 
                            document.getElementById("thankUMsg").innerHTML = '{!$Label.Thank_you_on_Submit}<br/><br/>{!$Label.Thank_you_on_Partial_Submit}<br/><br/>{!$Label.ensure_not_junk}';          
                           // $("#thxOnSave-body").show().css('height',280);
                            //$("#thankUMsg").show().css('height',280);
                           // bodyStyle: { maxHeight: '300px' },
                            Ext.getCmp('theCardWizard').getLayout().setActiveItem(4);                        
                            $("#save").hide();
                            $("#submit").hide();
                            $("#back").hide();
                             $("#next").hide(); 
                             $("#cancel").hide();       
                          }, 
                            {escape: true}
                         );      
                        
                    }     
                },
                {
                    xtype:'button',
                    
                    id:'cancel',
                    
                    text:'Cancel/Exit',
                    icon:'{!URLFOR($Resource.TOaImages, 'TOaImages/button_icon_10.png')}',
                    //tooltip:'Canel',
                    width:100,                    
                    handler: function() {                                      
                        document.getElementById("thankUMsg").innerHTML = '{!$Label.Thank_you_on_exit}<br/><br/>{!$Label.queries} {!$Label.contactId}';
                        SwitchPic(document.getElementById( 'fifth' ),"bc2_r.png");
                        SwitchPic1(document.getElementById( 'first' ),"bc1_g.png");
                         Ext.getCmp('theCardWizard').getLayout().setActiveItem(4);
                        $("#back").hide();
                        $("#save").hide();
                        $("#submit").hide();
                        $("#cancel").hide();
                        $("#next").hide();                                  
                    }      
                },
                {
                    xtype:'button',
                    icon:'{!URLFOR($Resource.TOaImages, 'TOaImages/button_icon_8.png')}',
                    id:'next',
                    text:'Next',
                    iconAlign:'right',
                    //tooltip:'Next',
                    width:100,                  
                    handler: function() { 
                    var activeItem = Ext.getCmp("theCardWizard").getLayout().activeItem;
                    var currentIndex = Ext.getCmp("theCardWizard").items.indexOf(activeItem);
                    
                 
                    if(currentIndex == 0)
                    {
                        SwitchPic(document.getElementById( 'second' ),"bc2_r.png");
                        SwitchPic1(document.getElementById( 'first' ),"bc1_g.png");
                        Ext.getCmp('theCardWizard').getLayout().setActiveItem(1);
                        //Ext.getCmp('move-prev')['enable']();
                        $("#back").css("left","0px");
                        $("#back").show();                            
                        $("#cancel").hide();
                        $("#next").hide();
                        $("#save").hide();
                        $("#submit").hide();
                    }
                    
                       

                    else if(currentIndex == 2)
                    {  
                        Ext.getCmp('addVehicleButton').disable();
                        Ext.getCmp('udateVehicleButton').disable();
                        Ext.getCmp('vehfrm').reset(); 
                        Ext.getCmp('vehfrm').disable();
                        Ext.getCmp('hwdfrm').reset(); 
                        Ext.getCmp('hwdfrm').disable(); 
                        SwitchPic(document.getElementById( 'fourth' ),"bc4_r.png");
                        SwitchPic1(document.getElementById( 'third' ),"bc3_g.png");             
                        Ext.getCmp('theCardWizard').getLayout().setActiveItem(3);
                        //Ext.getCmp('move-prev')['enable']();
                        $("#back").show();
                        $("#submit").show().css("left",reducedWidth1); 
                        $("#save").show(); 
                        $("#cancel").hide(); 
                        $("#next").hide(); 
                        Ext.getCmp('toaVehicle').getStore().removeAll();
                        Ext.getCmp('toaVehicle').getStore().sync();
                        var data = [];
                        
                        LocationStore.each(function(r){
                        data.push(r.data.LocationName);
                        });
                        $("#opt").empty();
                        var optCount=0;
                        $.each(data,function(index,val)
                        {
                            
                            //optCount++;
                            //if(optCount == 1)
                            //$("#opt").append('<option'+' selected>'+val+'</option>');
                           // else
                            $("#opt").append('<option>'+val+'</option>');
                        });
                    }
                        
                }      
            }
            ]
                
         });//ButtonPanel
        
         var selectVehQtyPanel= Ext.create('Ext.panel.Panel', {
             width   : 550,
             frame: true,
             border:false,
             //title:'Number of Vehicles',
             bodyPadding:'50 0 50 0',
             //height: 300,
             //header: false,
             layout: 'hbox',
             layout: 
             {
                 type: 'table',
                 columns: 2,
                 tableAttrs: 
                 {
                     style: 
                     {
                         
                         
                         align:'center',
                         id:'mytable'
                         //textAlign:center
                        
                     }
                 }
             },
             
             defaults: 
             {
                 labelAlign: 'right'
             },

             items: [
                 { 
                    cellCls: 'my-class',
                     xtype:'button',
                     margin:'0 0 0 82',                     
                     style: {
                        background: "transparent"
                     },
                     html:'<div style="padding:10px"><img src="{!URLFOR($Resource.TOaImages,
                     'TOaImages/vehicles.png')}" id="img1" style="height:54px;"/><br/>Online Entry Form</div>',
                     handler:function()
                     {
                        
                         SwitchPic(document.getElementById( 'third' ),"bc3_r.png");
                         SwitchPic1(document.getElementById( 'second' ),"bc2_g.png");
                         Ext.getCmp("theCardWizard").getLayout().setActiveItem(3);
                                       
                         
                         
                         //Ext.getCmp('move-prev')['enable']();
                          $("#back").show();
                          $("#save").show().css('left',reducedWidth);
                          $("#next").hide();
                          $("#submit").show();
                          $("#cancel").hide();                            
                     },
                     
                    
                 },
                
             
                 {
                    cellCls: 'my-class',
                     xtype:'button',
                     margin:'0 0 0 82',                     
                     style: {
                        background: "transparent"
                     },
                     html:'<div style="padding:10px"><img src="{!URLFOR($Resource.TOaImages,
                     'TOaImages/4_vehicles.png')}"/><br/>Offline Upload</div>',
                     handler:function()
                     {
                          SwitchPic(document.getElementById( 'fourth' ),"bc4_r.png");
                          SwitchPic1(document.getElementById( 'second' ),"bc2_g.png");
                          Ext.getCmp('theCardWizard').getLayout().setActiveItem(5);
                      
                     }
                     
                 },
                 {
                xtype: 'component',
                fieldLabel: '&nbsp;',
                height:'10px'
                
                 },
                 {
                xtype: 'component',
                fieldLabel: '&nbsp;',
                height:'10px'
                
                 },
                 
                 {
                     xtype:'label',
                     id:'webinput',
                     html:'<div style="text-align:center;color:grey">{!$Label.input_option}</div>'
                     
                    
                   
                 },
                 {
                     xtype:'label',
                     html:'<div style="text-align:center;color:grey">{!$Label.file_upload_option}</div>'
                     
                    
                   
                 }]
         
         
        });//selectVehQtyPanel
        
        var selectQtyOuterPanel = Ext.create('Ext.panel.Panel', {           
             frame:true,
             border:false,
             title:'Order Details Input',
             header:true,
             layout:
             {
                 type:'hbox',
                 pack:'center'
               
             },
             //bodyPadding: '50 25 25 25',
             margin:'30 0 0 0',
             items: [
            
             {            
                 xtype:selectVehQtyPanel
             }
             ]
         });//selectQtyOuterPanel 
         
         var CardOnePanel = Ext.create('Ext.panel.Panel', {
                
            border : false,
            frame:false,
            //margin:'10 0 0 0',     
            //frame: false, 
            autoEl: 'center',
            
            layout: {
                        type: 'vbox',
                        pack: 'top',
                        align:'center'
                    },         
            items: 
            [
                {
                    xtype : HeaderPanelForCardOne
                } ,
                {
                    xtype : selectQtyOuterPanel
                    //margin:'20 0 0 0'
                    //bodyPadding:'30 0 0 0'
                }
                
            ]
           
         });//Panel1 
         
         Ext.define('Ext.TOA.PurchasedService', { //Defining a panel in order to display our data
             extend      : 'Ext.grid.Panel',
             //alias       : 'widget.TOApanelVehicle',
             title       : 'Purchased Service',
             header      : true,
             name        : 'PurchasedService',
             id          : 'PurchasedService',
             //stateId   :'purchasedStateId',
             stateful: true,
             stateEvents: ["columnmove", "columnresize", "sortchange", "show", "hide"],
             columnLines : true,
             overflow    :'auto',
             //autoScroll  : true,
             overflowY: 'auto',
             overflowX: 'auto',
             singleSelect: true,         
             //border      : true,
                     
             store       : PurchasedServiceStore, //Associate with our store
             //selType: 'checkboxmodel',
                   
          
             frame :false,        
           
                
             columns: [ 
             {
                 header: 'Services',
                 dataIndex: 'service',
                 width       :65
                
             },
             {
                 header: 'Devices',
                 dataIndex: 'device',
                 width       :77,
                maxwidth:200
                 
             },
             {
                 header: 'Order Qty',
                 dataIndex: 'orderQty',
                 width       :60
                 
             },
             {
                 header: 'Balance',
                 dataIndex: 'balance',
                 width       :44
                 
             }             
                                                        

          ]  
           //renderTo:gridSpace       
         }); //PurchasedService grid
          
         var Vehicle_form = Ext.create('Ext.form.Panel',{
             id:'vehfrm',
             //monitorValid : true,
             width:430,
             height:'98.5%',
             //margin:3,
             disabled:true,
             frame:true,
             title:'Vehicle',
             icon:'{!URLFOR($Resource.TOaImages, 'TOaImages/2.png')}',
             header:true,
             //layout:'table',
             layout: 
             {
                 type: 'table',
                 columns: 2,
                 tableAttrs: 
                 {
                     style: 
                     {
                         //width: '100%',
                        
                     }
                 }
             },
             bodyPadding: 0,
             defaults: 
             {
                 labelAlign: 'right'
                 //bodyPadding: 15,
             },

             items: [
                 {
                            name:'id',
                            xtype:'hidden',
                            id:'vehfrmId'
                 },
                { 
                     fieldLabel: 'Select Service',
                     name: 'Service',
                     allowBlank:false,
                     tabIndex:1,
                     id:'vehfrmService',
                     required:true,
                     xtype: 'combo',
                     //store: ['Install', 'Swap','Transfer','Troubleshoot'], 
                     store:InstallTypeStore,
                     //x: 0,y: 0,
                     width: 200,
                     queryMode: 'local',
                     forceSelection: true, 
                     triggerAction: 'all',
                     displayField:'Installtype',
                     listeners: {
                                change: function(field, newValue, oldValue){
                                
                                             if(newValue == 'Transfer')
                                             {
                                                 Ext.getCmp('transferfield').enable();
                                                 Ext.getCmp('transferfield1').enable();
                                             }
                                             else
                                             {
                                                 Ext.getCmp('transferfield').disable();
                                                 Ext.getCmp('transferfield1').disable();
                                             }
                                             if(newValue == 'Swap')
                                             {
                                                 Ext.getCmp('swapfield').enable();
                                             }
                                             else
                                                 Ext.getCmp('swapfield').disable();
                                             Ext.getCmp('hwdfrmSDevice').setValue(null);   
                                            Ext.getCmp('hwdfrmPDevice').setValue(null);
                                            //Ext.getCmp('hwfrmHarness').setValue(null); 
                                            //Ext.getCmp('hwfrmHarness').disable(); 
                                            
                                             secondaryDeviceStore.clearFilter();
                                             if(newValue == 'Removal' || newValue == 'Swap')
                                             {
                                                 Ext.getCmp('hwdfrmRetIns').enable();
                                                
                                             }
                                              else
                                             {
                                                 Ext.getCmp('hwdfrmRetIns').disable();
                                                 
                                                 }
                                             if (newValue!=null && newValue!=undefined) {                                                                    
                                                      secondaryDeviceStore.filter( { property: 'InstallType', value: newValue, exactMatch: true } );
                                              }
                                               else{
                                                     secondaryDeviceStore.filter( { property: 'InstallType', value: 'dirty', exactMatch: true } );
                                               }    
                                               
                                           
                                            
                                            PIndex=PurchasedServiceStore.findBy(function(record) {
                                            if (record.get('service') == newValue && (record.get('Devicetype')=='PrimaryDevice')&& (record.get('balance')>0)) {
                                                 return true;
                                              }
                                                  return false;
                                            });
                                            PIndexWithOutBal=PurchasedServiceStore.findBy(function(record) {
                                            if (record.get('service') == newValue && (record.get('Devicetype')=='PrimaryDevice')) {
                                                 return true;
                                              }
                                                  return false;
                                            });
                                              vehid=Ext.getCmp('vehfrmId').getValue();
                                          
                                            if(PIndex==-1 )
                                            {
                                                var oldPrDevice;
                                            if(vehid!=null && vehid!=undefined && vehid.trim()!='')
                                            {
                                                var recordIndex1 = VehicleStore.find('id',vehid);
                                                oldPrDevice=VehicleStore.getAt(recordIndex1).data.DeviceType;
                                                if( oldPrDevice!=null && oldPrDevice!=undefined && oldPrDevice.trim()!='' && PIndexWithOutBal!=-1 )
                                                    Ext.getCmp('hwdfrmPDevice').enable();
                                                else
                                                    Ext.getCmp('hwdfrmPDevice').disable(); 
                                            }
                                            else                                                
                                                  Ext.getCmp('hwdfrmPDevice').disable(); 
                                            }else{
                                                 Ext.getCmp('hwdfrmPDevice').enable();
                                            }                     
                                                                              
                                            var len=SensorStore.getCount();
                                            Ext.getCmp('SensorGrid').getStore().removeAll();
                                            var arr=[];
                                                
                                                PurchasedServiceStore.each(function(r){
                                                vehid=Ext.getCmp('vehfrmId').getValue();
                                                var fg = true;
                                                if(vehid!=null && vehid!=undefined && vehid.trim()!='')
                                                {
                                                var recordIndex = VehicleStore.find('id',vehid);
                                                if(r.data.service == newValue &&(r.data.device.toLowerCase() == 'sensor1' || r.data.device.toLowerCase() == 'sensor2' || r.data.device.toLowerCase() == 'sensor 1' || r.data.device.toLowerCase() == 'sensor 2' || r.data.device.toLowerCase() == 'sensor3' || r.data.device.toLowerCase() == 'sensor4' || r.data.device.toLowerCase() == 'sensor 3' || r.data.device.toLowerCase() == 'sensor 4' || r.data.device.toLowerCase() == 'sensor5' || r.data.device.toLowerCase() == 'sensor6' || r.data.device.toLowerCase() == 'sensor 5' || r.data.device.toLowerCase() == 'sensor 6'))
                                                {
                                                    if(r.data.device.toLowerCase() == 'sensor1' || r.data.device.toLowerCase() == 'sensor 1')
                                                    {
                                                    if(VehicleStore.getAt(recordIndex).data.Sensor1 !='')
                                                    {
                                                        //existing sensor
                                                        arr.push(r.data.device);
                                                        SensorStore.loadData(arr);
                                                    }
                                                    else
                                                    {
                                                        //new sensor
                                                        if(r.data.balance > 0)
                                                        arr.push(r.data.device);
                                                        SensorStore.loadData(arr);
                                                    }
                                                    }
                                                    if(r.data.device.toLowerCase() == 'sensor2' || r.data.device.toLowerCase() == 'sensor 2')
                                                    {
                                                    if(VehicleStore.getAt(recordIndex).data.Sensor2 !='')
                                                    {
                                                        //existing sensor
                                                        arr.push(r.data.device);
                                                        SensorStore.loadData(arr);
                                                    }
                                                    else
                                                    {
                                                        //new sensor
                                                        if(r.data.balance > 0)
                                                        arr.push(r.data.device);
                                                        SensorStore.loadData(arr);
                                                    }
                                                    }
                                                    if(r.data.device.toLowerCase() == 'sensor3' || r.data.device.toLowerCase() == 'sensor 3')
                                                    {
                                                    if(VehicleStore.getAt(recordIndex).data.Sensor3 !='')
                                                    {
                                                        //existing sensor
                                                        arr.push(r.data.device);
                                                        SensorStore.loadData(arr);
                                                    }
                                                    else
                                                    {
                                                        //new sensor
                                                        if(r.data.balance > 0)
                                                        arr.push(r.data.device);
                                                        SensorStore.loadData(arr);
                                                    }
                                                    }
                                                    if(r.data.device.toLowerCase() == 'sensor4' || r.data.device.toLowerCase() == 'sensor 4')
                                                    {
                                                    if(VehicleStore.getAt(recordIndex).data.Sensor4 !='')
                                                    {
                                                        //existing sensor
                                                        arr.push(r.data.device);
                                                        SensorStore.loadData(arr);
                                                    }
                                                    else
                                                    {
                                                        //new sensor
                                                        if(r.data.balance > 0)
                                                        arr.push(r.data.device);
                                                        SensorStore.loadData(arr);
                                                    }
                                                    }
                                                    if(r.data.device.toLowerCase() == 'sensor5' || r.data.device.toLowerCase() == 'sensor 5')
                                                    {
                                                    if(VehicleStore.getAt(recordIndex).data.Sensor5 !='')
                                                    {
                                                        //existing sensor
                                                        arr.push(r.data.device);
                                                        SensorStore.loadData(arr);
                                                    }
                                                    else
                                                    {
                                                        //new sensor
                                                        if(r.data.balance > 0)
                                                        arr.push(r.data.device);
                                                        SensorStore.loadData(arr);
                                                    }
                                                    }
                                                    if(r.data.device.toLowerCase() == 'sensor6' || r.data.device.toLowerCase() == 'sensor 6')
                                                    {
                                                    if(VehicleStore.getAt(recordIndex).data.Sensor6 !='')
                                                    {
                                                        //existing sensor
                                                        arr.push(r.data.device);
                                                        SensorStore.loadData(arr);
                                                    }
                                                    else
                                                    {
                                                        //new sensor
                                                        if(r.data.balance > 0)
                                                        arr.push(r.data.device);
                                                        SensorStore.loadData(arr);
                                                    }
                                                    }
                                                    
                                                }
                                                }
                                                else
                                                {
                                                   if(r.data.service == newValue &&(r.data.device.toLowerCase() == 'sensor1' || r.data.device.toLowerCase() == 'sensor2' || r.data.device.toLowerCase() == 'sensor 1' || r.data.device.toLowerCase() == 'sensor 2' || r.data.device.toLowerCase() == 'sensor3' || r.data.device.toLowerCase() == 'sensor4' || r.data.device.toLowerCase() == 'sensor 3' || r.data.device.toLowerCase() == 'sensor 4' || r.data.device.toLowerCase() == 'sensor5' || r.data.device.toLowerCase() == 'sensor6' || r.data.device.toLowerCase() == 'sensor 5' || r.data.device.toLowerCase() == 'sensor 6')&& r.data.balance > 0)
                                                   {
                                                       if(r.data.device.toLowerCase() == 'sensor1' || r.data.device.toLowerCase() == 'sensor 1')
                                                    arr.push(r.data.device);
                                                    if(r.data.device.toLowerCase() == 'sensor2' || r.data.device.toLowerCase() == 'sensor 2')
                                                    arr.push(r.data.device);
                                                    if(r.data.device.toLowerCase() == 'sensor3' || r.data.device.toLowerCase() == 'sensor 3')
                                                    arr.push(r.data.device);
                                                    if(r.data.device.toLowerCase() == 'sensor4' || r.data.device.toLowerCase() == 'sensor 4')
                                                    arr.push(r.data.device);
                                                    if(r.data.device.toLowerCase() == 'sensor5' || r.data.device.toLowerCase() == 'sensor 5')
                                                    arr.push(r.data.device);
                                                    if(r.data.device.toLowerCase() == 'sensor6' || r.data.device.toLowerCase() == 'sensor 6')
                                                    arr.push(r.data.device);
                                                    SensorStore.loadData(arr);
                                                    
                                                   }
                                                }
                                                });
                                                
                                                
                                                
                                                var addonarray=[];
                            var flag = false;
                            secondaryDeviceStore.each(function(r)
                            {
                                addonarray.push(r.data.InstallationDevices);
                                
                                
                            });
                            
                             vehid=Ext.getCmp('vehfrmId').getValue();
                            
                                            
                             if(vehid!=null && vehid!=undefined && vehid.trim()!='')
                             {
                                 for(var x=0;x<addonarray.length;x++)
                                {
                                    PurchasedServiceStore.each(function(r)
                                    {
                                         if(r.data.device == addonarray[x] && r.data.service == newValue)
                                         {
                                         flag = true;
                                       
                                         
                                         }
                                         
                                    });
                                }
                            if(flag == false)
                            Ext.getCmp('hwdfrmSDevice').disable();
                            else
                            Ext.getCmp('hwdfrmSDevice').enable();
                             }
                             else
                             {
                                for(var x=0;x<addonarray.length;x++)
                                {
                                    PurchasedServiceStore.each(function(r)
                                    {
                                         if(r.data.device == addonarray[x] && r.data.service == newValue && r.data.balance > 0)
                                         {
                                         flag = true;
                                         
                                         }
                                         
                                    });
                                }
                                if(flag == false)
                                Ext.getCmp('hwdfrmSDevice').disable();
                                else
                                Ext.getCmp('hwdfrmSDevice').enable();
                             }
                             if(newValue == 'Training'){
                                        Ext.getCmp('hwdfrmPDevice').enable();
                             }
                                               
                                                                      
                                }
                                }
                    
                 },
             
                        
                 {
                     fieldLabel: 'License Plate',
                     tabIndex:9,
                     //x: 40,y: 0,
                     width: 200,
                     //labelWidth:120,
                     name: 'LicensePlate',
                     xtype: 'textfield'  
                 },
                 {
                     fieldLabel: 'Vehicle Label', 
                     //x: 0,y: 30,
                     width: 200,
                     tabIndex:2,
                     name: 'VehicleLabel',
                     xtype: 'textfield'
                 },
                 {
                     fieldLabel: 'License State/Province',
                    // labelWidth:120,
                    tabIndex:10,
                     name: 'LicenseState', 
                     //x: 60,y: 30,
                     width: 200,
                     xtype: 'combo',  
                     queryMode: 'local',
                     //store:StateStore,
                     store: LicenseStateStore,
                     displayField:'LicenseState'
                    
                 },
                 {
                     fieldLabel: 'Year *',
                     name: 'Year', 
                     tabIndex:3,
                     //xtype: 'textfield', 
                     xtype:'numberfield',
                     maxValue:2500,
                     minValue:1900,
                     //x:0,y: 60,
                     width: 200,
                     queryMode: 'local',
                     value:currentYear,
                     //store:YearStore,
                     displayField:'Year',
                     //allowBlank:false,
                     validator: function(v) 
                     {
                        
                        if(v.length == 0 | Ext.util.Format.trim(v).length == 0)
                        return 'Enter UNKNOWN if unknown';
                        else if(v.length < 4)
                        return 'Invaid Year';
                        return true;
                     }
                 

                 }, 
                 {
                     fieldLabel: 'Color',
                     tabIndex:11,
                    // labelWidth:120,
                   // x:60,y: 60,
                    width: 200,
                     name: 'Color', 
                     xtype: 'textfield',
                     queryMode: 'local',
                     //store:ColorStore,
                     displayField:'Color'       

                 },
                 {
                            
                    fieldLabel: 'Make *',
                    name: 'Make', 
                    x:0,y: 90,
                    tabIndex:4,
                    width: 200,
                    xtype: 'textfield',
                    queryMode: 'local',
                    //store:MakeStore,
                    displayField:'Make',
                    //allowBlank:false,
                    validator: function(v) 
                    {
                        if(v.length == 0 | Ext.util.Format.trim(v).length == 0)
                        return 'Enter UNKNOWN if unknown';
                        else
                        return true;
                    }      

                 },  
                 {
                            
                    fieldLabel: 'Fuel Type',
                   // labelWidth:120,
                   tabIndex:12,
                    name: 'FuelType',  
                    //x:60,y: 90,
                    width: 200,
                    matchFieldWidth: false,
                    xtype: 'combo',
                    queryMode: 'local',
                    store:fuelTypeStore,
                    //store: ['Install', 'Swap','Transfer','Troubleshoot'],
                    displayField:'FuelType'      

                 }, 
                 {
                            
                    fieldLabel: 'Model *',
                    name: 'Model', 
                    tabIndex:5,
                    //x:0,y: 120,
                    width: 200,
                    xtype: 'textfield',
                    queryMode: 'local',
                    //store:ModelTypeStore,
                    displayField:'Model',
                    //allowBlank:false,
                    validator: function(v) 
                    {
                        if(v.length == 0 | Ext.util.Format.trim(v).length == 0)
                        return 'Enter UNKNOWN if unknown';
                        else
                        return true;
                    }      

                 },
                 {
                            
                    fieldLabel: 'Notes',
                    tabIndex:13,
                   // labelWidth:120,
                    name: 'Notes', 
                   // x:60,y: 120,
                    width: 200,
                    xtype: 'textarea',
                    rowspan:3,
                    height:120
                         
                 },
                 {
                            
                    fieldLabel: 'VIN *',
                    name: 'VIN', 
                    tabIndex:6,
                    //x:0,y: 150,
                    width: 200,
                    xtype: 'textfield',
                    afterSubTpl: '<font color="grey" size="1.5">if VIN unavailable enter <b>unknown</b></font>',
                    //allowBlank:false,
                    validator: function(v) 
                    {
                        if(v.length == 0 | Ext.util.Format.trim(v).length == 0)
                        return 'Enter UNKNOWN if unknown';
                        if(v.length>17)
                        return 'VIN length cannot be greater than 17 characters';
                       if(((v.toLowerCase()!='unknown')) && (v.indexOf("I") != -1 || v.indexOf("O") != -1 || v.indexOf("i") != -1 || v.indexOf("o") != -1))
                        return 'VIN cannot contain I or O';
                        return true;                     
                    }
                         
                 },    
                 {
                    fieldLabel: 'Old VIN(Transfer)',
                    tabIndex:7,
                    //x:60,y: 150,
                    width: 200,
                    name: 'OLDVIN', 
                    xtype: 'textfield',
                    id:'transferfield',
                    disabled:true
                    
                           
                 },    
                 {
                            
                    fieldLabel: 'Old Vehicle Label',
                    tabIndex:8,
                    //x:0,y: 150,
                    width: 200,
                    name: 'OldVehicleLabel', 
                    xtype: 'textfield',
                    id:'transferfield1',
                    disabled:true
                            
                 },
                 {
                     xtype:'button',
                     text:'Clear Form', 
                                    
                     icon:'{!URLFOR($Resource.TOaImages, 'TOaImages/button_icon_10.png')}',
                     width:100, 
                            //id:'updateLocBtn',
                     //tooltip:'Clear form', 
                     margin:'0 0 0 100',                           
                                                                                       
                     handler: function() {   
                     Ext.getCmp('vehfrm').reset(); 
                     Ext.getCmp('hwdfrm').reset();     
                     Ext.getCmp('SensorGrid').getStore().removeAll();
                     Ext.getCmp('SensorGrid').getStore().sync();
                    var arr=[];
                    
                     SensorStore.loadData(arr);                                            
                                
                     var myGrid= Ext.getCmp('toaVehicle');
                     myGrid.getSelectionModel().deselectAll();
                     Ext.getCmp('udateVehicleButton').disable();
                     checkForAddEnable();        
                     
                     }
                 }
                 ]
                    //renderTo:gridSpace
     });//Vehicle_form
        
         
      
       
        var TOApanelVehicle = new Ext.create('Ext.TOA.TOApanelVehicle', { 
            //header : true,
            height:h-500,
            margin: '0 0 0 5',
            viewConfig: { 
                stripeRows: false,
                markDirty:false, 
                getRowClass: function(record) { 
                return record.get('isSubmitted')  ? 'child-row' : 'adult-row'; 
                } 
                } ,
        
             listeners:{
                    select:function(){                        
                                 
                        var myGrid= Ext.getCmp('toaVehicle');
                        
                        var selectedRows = myGrid.getSelectionModel().getSelection();
                        
                        if(selectedRows.length)
                        {
                            Ext.getCmp('deleteVeh').enable();
                            if(selectedRows.length==1)
                            {
                               
                                Ext.getCmp('addVehicleButton').disable(); 
                                Ext.getCmp('udateVehicleButton').enable(); 
                                var form = Ext.getCmp('vehfrm').getForm();                                                   
                                form.reset();
                                var hwdfrm = Ext.getCmp('hwdfrm').getForm(); 
                                hwdfrm.reset();
                                var vehicle = myGrid.getSelectionModel().getSelection()[0].get('id');
                                Ext.getCmp('vehfrmId').setValue(vehicle);
                                var recordIndex = VehicleStore.find('id',vehicle);
                                
                                var oldservice=VehicleStore.getAt(recordIndex).data.Service;
                                var oldHarness=VehicleStore.getAt(recordIndex).data.Harness;
                                var oldDeviceType=VehicleStore.getAt(recordIndex).data.DeviceType;
                                var oldAccessories=VehicleStore.getAt(recordIndex).data.Accessories;
                               
                                 rePopulateStores(oldservice,oldHarness,oldDeviceType,oldAccessories);
                                
                                
                                //var vehrec = VehicleStore.getAt(recordIndex).data;
                                //Ext.getCmp('vehfrm').setValues(vehrec);
                                
                                var service=VehicleStore.getAt(recordIndex).data.Service;  
                                //alert('sensor count is '+SensorStore.getCount());
                                form.findField('Service').setValue(service);  
                                var vin=VehicleStore.getAt(recordIndex).data.VIN;
                                form.findField('VIN').setValue(vin);  
                                //alert('sensor count is '+SensorStore.getCount());
                                var VehicleLabel=VehicleStore.getAt(recordIndex).data.VehicleLabel;
                                form.findField('VehicleLabel').setValue(VehicleLabel);  
                                var OLDVIN=VehicleStore.getAt(recordIndex).data.OLDVIN;
                                form.findField('OLDVIN').setValue(OLDVIN);  
                                var OldVehicleLabel=VehicleStore.getAt(recordIndex).data.OldVehicleLabel;
                                form.findField('OldVehicleLabel').setValue(OldVehicleLabel);  
                                var Year=VehicleStore.getAt(recordIndex).data.Year;
                                form.findField('Year').setValue(Year);  
                                var Make=VehicleStore.getAt(recordIndex).data.Make;
                                form.findField('Make').setValue(Make);  
                                var Model=VehicleStore.getAt(recordIndex).data.Model;
                                form.findField('Model').setValue(Model); 
                                var LicensePlate=VehicleStore.getAt(recordIndex).data.LicensePlate;
                                form.findField('LicensePlate').setValue(LicensePlate);   
                                var LicenseState=VehicleStore.getAt(recordIndex).data.LicenseState;
                                form.findField('LicenseState').setValue(LicenseState);   
                                
                                var Color=VehicleStore.getAt(recordIndex).data.Color;
                                form.findField('Color').setValue(Color);   
                                var FuelType=VehicleStore.getAt(recordIndex).data.FuelType;
                                form.findField('FuelType').setValue(FuelType);
                                var DeviceType=VehicleStore.getAt(recordIndex).data.DeviceType;
                                hwdfrm.findField('DeviceType').setValue(DeviceType);
                                var SerialNum=VehicleStore.getAt(recordIndex).data.Serial;
                                hwdfrm.findField('Serial').setValue(SerialNum);
                                var OldSerial=VehicleStore.getAt(recordIndex).data.OldSerial;
                                hwdfrm.findField('OldSerial').setValue(OldSerial);
                                var HarnessType=VehicleStore.getAt(recordIndex).data.Harness;
                                hwdfrm.findField('Harness').setValue(HarnessType);
                                var Notes=VehicleStore.getAt(recordIndex).data.Notes;
                                form.findField('Notes').setValue(Notes);
                                //var Accessories=VehicleStore.getAt(recordIndex).data.Accessories;
                                var accessoriesArr = [];
                                var accstr = VehicleStore.getAt(recordIndex).data.Accessories;
                                var accessoriesArr = accstr.split(',');
                                hwdfrm.findField('Accessories').setValue(accessoriesArr);
                                
                                var sensorgroup = [];
                                var sensor1=VehicleStore.getAt(recordIndex).data.Sensor1;
                                
                                if(sensor1 != null && sensor1!=undefined && sensor1!='')
                                {
                                    //sensorgroup.push(sensor1);
                                    var PIndex=SensorStore.findBy(function(record) {
                                        
                                          if (record.get('SensorName').toLowerCase() == 'sensor1' || record.get('SensorName').toLowerCase() == 'sensor 1') {
                                             return true;
                                          }
                                          return false;
                                          });
                                          if(PIndex != -1)
                                          {
                                              SensorStore.getAt(PIndex).set('SensorLabel',sensor1);
                                          }
                                }
                                var sensor2=VehicleStore.getAt(recordIndex).data.Sensor2;
                                if(sensor2 != null && sensor2 !=undefined && sensor2!='')
                                {
                                   // sensorgroup.push(sensor2);
                                    var PIndex=SensorStore.findBy(function(record) {
                                        
                                          if (record.get('SensorName').toLowerCase() == 'sensor2' || record.get('SensorName').toLowerCase() == 'sensor 2') {
                                             return true;
                                          }
                                          return false;
                                          });
                                          if(PIndex != -1)
                                          {
                                              SensorStore.getAt(PIndex).set('SensorLabel',sensor2);
                                          }
                                }
                                var sensor3=VehicleStore.getAt(recordIndex).data.Sensor3;
                            
                                if(sensor3 != null && sensor3!=undefined && sensor3!='')
                                {
                                    //sensorgroup.push(sensor3);
                                    var PIndex=SensorStore.findBy(function(record) {
                                        
                                          if (record.get('SensorName').toLowerCase() == 'sensor3' || record.get('SensorName').toLowerCase() == 'sensor 3') {
                                             return true;
                                          }
                                          return false;
                                          });
                                          if(PIndex != -1)
                                          {
                                              SensorStore.getAt(PIndex).set('SensorLabel',sensor3);
                                          }
                                }
                             
                                var sensor4=VehicleStore.getAt(recordIndex).data.Sensor4;
                                if(sensor4 != null && sensor4!=undefined && sensor4!='')
                                {
                                    //sensorgroup.push(sensor4);
                                    var PIndex=SensorStore.findBy(function(record) {
                                        
                                          if (record.get('SensorName').toLowerCase() == 'sensor4' || record.get('SensorName').toLowerCase() == 'sensor 4') {
                                             return true;
                                          }
                                          return false;
                                          });
                                          if(PIndex != -1)
                                          {
                                              SensorStore.getAt(PIndex).set('SensorLabel',sensor4);
                                          }
                                }
                                var sensor5=VehicleStore.getAt(recordIndex).data.Sensor5;
                                if(sensor5 != null && sensor5!=undefined && sensor5!='')
                                {
                                   var PIndex=SensorStore.findBy(function(record) {
                                        
                                          if (record.get('SensorName').toLowerCase() == 'sensor5' || record.get('SensorName').toLowerCase() == 'sensor 5') {
                                             return true;
                                          }
                                          return false;
                                          });
                                          if(PIndex != -1)
                                          {
                                              SensorStore.getAt(PIndex).set('SensorLabel',sensor5);
                                          }
                                }
                                var sensor6=VehicleStore.getAt(recordIndex).data.Sensor6;
                                if(sensor6 != null && sensor6!=undefined && sensor6!='')
                                {
                                    var PIndex=SensorStore.findBy(function(record) {
                                        
                                          if (record.get('SensorName').toLowerCase() == 'sensor6' || record.get('SensorName').toLowerCase() == 'sensor 6') {
                                             return true;
                                          }
                                          return false;
                                          });
                                          if(PIndex != -1)
                                          {
                                              SensorStore.getAt(PIndex).set('SensorLabel',sensor6);
                                          }
                                }
                                //alert('sensor count '+SensorStore.getCount());
                                //alert('sensor group length '+sensorgroup.length);
                               // SensorStore.loadData(sensorgroup);
                              
                                
                            }
                            else
                            {
                                var form = Ext.getCmp('vehfrm').getForm();                                                   
                                form.reset();
                                 removePicklistOptionWhenBalaceZero();
                                Ext.getCmp('hwdfrm').reset();
                                Ext.getCmp('SensorGrid').getStore().removeAll();
                                Ext.getCmp('SensorGrid').getStore().sync();
                                Ext.getCmp('udateVehicleButton').disable();
                                checkForAddEnable();   
                            }
                            
                        }
                        else
                        {
                            Ext.getCmp('deleteVeh').disable();
                        }
                      
                        
                    },
                    deselect:function()
                    {
                        
                        var form = Ext.getCmp('vehfrm').getForm();  
                        removePicklistOptionWhenBalaceZero();                                                 
                                form.reset();
                                Ext.getCmp('hwdfrm').reset();
                                Ext.getCmp('SensorGrid').getStore().removeAll();
                                Ext.getCmp('SensorGrid').getStore().sync();
                                checkForAddEnable();
                                Ext.getCmp('udateVehicleButton').disable();
                                 var arr=[];
                               // arr.push('Sensor1');
                               // arr.push('Sensor2');
                                SensorStore.loadData(arr);
                                
                        var myGrid= Ext.getCmp('toaVehicle');
                        var selectedRows = myGrid.getSelectionModel().getSelection();
                        if(selectedRows.length == 0 )
                            Ext.getCmp('deleteVeh').disable();
                        else
                         Ext.getCmp('deleteVeh').enable();
                                
                    },
                    beforeselect:function(obj, record, index, eOpts )
                    {
                        var isreadonly=VehicleStore.getAt(index).data.isSubmitted;
                        if(isreadonly)
                        {
                        //Ext.Msg.alert('Read Only Record','Vechicle already been submitted, cannot be edited!');
                         return false;
                         }
                    }
                    

                }                        
            
        }); 
        
        var InstructionPanel = Ext.create('Ext.panel.Panel', {
            //autoHeight:false,
            //autoWidth:false,
            margin:'0 1 0 1',
            height:119,
            frame:true,
            width:518,
            //header : true,
            title:'Instructions:<font color="grey">Please follow the instructions below</font>',           
            border : false,
            bodyPadding: 0,            
            layout:
            {
               
               
            },
            items:[
            {
                //html:'<img src="{!URLFOR($Resource.TOaImages,'TOaImages/1.png')}"/><span style="font-size:12px;line-height: 70%;text-align:left">Select the service location of the vehicle(per valid location information entered on previous page)</span><br/><img src="{!URLFOR($Resource.TOaImages,'TOaImages/2.png')}"/><span style="font-size:12px;line-height: 70%;text-align:left">Select the service and enter the requested vehicle information</span><br/><img src="{!URLFOR($Resource.TOaImages,'TOaImages/3.png')}"/><span style="font-size:12px;line-height: 70%;text-align:left">Select the device, add-on(s), sensor(s), and enter the hardware and information</span><br/><img src="{!URLFOR($Resource.TOaImages,'TOaImages/4.png')}"/><span style="font-size:12px;line-height: 70%;text-align:left">Click the "Add Vehicle Record" button to add service/vehicle to the grid below</span><br/><img src="{!URLFOR($Resource.TOaImages,'TOaImages/5.png')}"/><span style="font-size:12px;line-height: 70%;text-align:left">Click the service button when all vehicles/services have been entered for order</span>'
                xtype:'label',
                
                html:'<div style="width:100%;margin-bottom: 1px;"><img src="{!URLFOR($Resource.TOaImages,'TOaImages/1.png')}" style="float:left;margin-right:5px;"></img>&nbsp<span style="font-size:11px;line-height: 70%;text-align:left;float:left">Select the service location of the vehicle</span></div><div style="width:100%;margin-bottom: 1px;"><img src="{!URLFOR($Resource.TOaImages,'TOaImages/2.png')}" style="float:left;margin-right:5px;"></img>&nbsp<span style="font-size:11px;line-height: 70%;float:left">Select the service and enter the requested vehicle information</span></div><div style="width:100%;margin-bottom: 1px;"><img src="{!URLFOR($Resource.TOaImages,'TOaImages/3.png')}" style="float:left;margin-right:5px;"></img>&nbsp<span style="font-size:11px;line-height: 70%;text-align:left;float:left">Select the device, add-on(s), sensor(s), and enter the hardware related information </span></div><div style="width:100%;margin-bottom: 1px;"><img src="{!URLFOR($Resource.TOaImages,'TOaImages/4.png')}" style="float:left;margin-right:5px;"></img>&nbsp<span style="font-size:11px;line-height: 70%;text-align:left;float:left">Click the "Add Vehicle Record" button to add service/vehicle to the grid below </span></div><div style="width:100%"><img src="{!URLFOR($Resource.TOaImages,'TOaImages/5.png')}" style="float:left;margin-right:5px;"></img>&nbsp<span style="font-size:11px;line-height: 70%;text-align:left;float:left">Click the "Submit" button when all the vehicles/services have been entered for the order</span></div>'
                
                  
            }]
            //renderTo:gridSpace
            }
         );//InstructionPanel 
          var cellEditing= Ext.create('Ext.grid.plugin.CellEditing', {
          clicksToEdit: 1,
          pluginId: 'cellEditing',
          listeners:
          {
              edit:function(e,editor)
              {
                 
                 //var listOfSensor=[];
                 //listOfSensor.push(editor.record.get('SensorName'));
                
                 SensorStore.getAt(editor.rowIdx).set('SensorName',editor.record.get('SensorName'));
                 //sensorList.push(editor.record.get('SensorName'));
              },
              beforeedit:function(e,editor)
              {
                if(editor.colIdx === 0)
                return false;
              }
          }
          
       });       
        
        Ext.define('Ext.TOA.SensorGrid', { //Defining a panel in order to display our data
             extend      : 'Ext.grid.Panel',
             //alias       : 'widget.TOApanelVehicle',
             //title       : 'Sensors',
             header      : false,
             name        : 'SensorGrid',
             id          : 'SensorGrid',
             columnLines : true,
             overflow    :'auto',
             autoScroll  : true,
             singleSelect: true,         
             //border      : true,
             height      : 70,
             width       : 297,
             padding     :'0 0 0 2',
             //margin      :2,              
             store       : SensorStore, //Associate with our store
             //selType: 'checkboxmodel',       
             frame :false,   
             plugins : [cellEditing],            
             columns: [               
              
             {
                 
                 dataIndex: 'SensorName',
                 flex: 1, 
                 editor: {
                     xtype: 'textfield', 
                     emptyText:'Sensor'           
                    
                 }  
                  
                
             },
             
             {
                 
                 dataIndex: 'SensorLabel',
                 flex: 2, 
                 editor: {
                     xtype: 'textfield', 
                     emptyText:'Sensors(enter senosr name)'           
                    
                 }  
                  
                
             } 
          ],
          tbar: [{
                  
                  xtype:'label',
                  html:'<b>Sensors</b>'
                 }
            ]   
           //renderTo:gridSpace       
        }); //SensorGrid
        
        var SensorGrid = new Ext.create('Ext.TOA.SensorGrid', { 
           header : false,
            hideHeaders:true, 
            viewConfig: { 
               
                markDirty:false
                },
            listeners:
            {
                select:function()
                {                        
                                           
                        
                }

            }                        

        }); 
        
        var PurchasedService = new Ext.create('Ext.TOA.PurchasedService', { 
           // header : true,
            border:true,
            width:252,
            //width:235,
            margin:'1 0 0 1',
            height:197,
            listeners:
            {
                select:function(){                        
                                           
                        
                }

            },
            viewConfig: { 
               
                markDirty:false
                }
            
                //renderTo:gridSpace                      

        }); 
        
        var ServiceLocationPanel = Ext.create('Ext.form.Panel',{        
            margin:'1 1 0 1' ,
            //width:305,
            width:265,
            height: 197,
            frame:true,
            border:false,
            
            //border:true,
            title:'Select Service Location',
            icon:'{!URLFOR($Resource.TOaImages, 'TOaImages/1.png')}',
            //header:true,
            
             layout: 
             {
                 type: 'table',
                 columns: 2,
                 tableAttrs: 
                 {
                     style: 
                     {
                         //width: '100%',
                        
                     }
                 }
             },
            items: [
            
            { 
                           
                xtype:'label',
                text:'Location Names',
                id:'locname',
                width:100
            },
            
                        
            {
               
                //html:'<select id="opt" style="width:100%;height:90px" multiple/>',
                html:'<select id="opt" class="target" style="width:100%;height:80px;" multiple onchange="myFunction(this)"/>',
                rowspan:2,
                width:160
            },
            {
                text:'Add Location',
                xtype: 'button',
                //tooltip:'Add Location',
                align:'top',
                 handler:function()
                {
                    Ext.getCmp('theCardWizard').getLayout().setActiveItem(2);
                    SwitchPic(document.getElementById( 'third' ),"bc3_r.png");
                    SwitchPic1(document.getElementById( 'fourth' ),"bc4_g.png");                           
                    $("#back").hide();
                    $("#save").show();
                    $("#next").show();
                    $("#cancel").hide();
                    $("#submit").hide();
                }
                            
            },         
                      
            {
                html:'<span style="font-size:11px;color:grey">To preview all vehicle entries for location(s), select</span>',
                width:'100%',               
                xtype: 'label',
                colspan:2
                            
            },
            {
                html:'<span style="font-size:11px;color:grey">the desired location name(s) from list above and</span>',
                xtype: 'label',
                colspan:2
                            
            },
            {
                html:'<span style="font-size:11px;color:grey">click the "Display in Grid" button.</span>',
                xtype: 'label',
                colspan:2
                            
            },
            {
                html:'<span style="font-size:11px;color:grey">Note:display only/not editalbe</span>',
                xtype: 'label'
                //colspan:2,
                //rowspan:2
            },
            
           {
                text:'Display in Grid',
                disabled:true,
                xtype: 'button',
                //tooltip:'Display in Grid',
                //colspan:2,
                id:'displayInGrid',
                margin:'0 0 0 75',
                rowspan:1,
                handler:function()
                {
                    
                       var a1=[]; 
                        
                        for(var j=0;j<locList.length;j++)
                        {
                            //IT-698 - Fix - decodeHTML
                            var locIndex = LocationStore.find('LocationName',decodeHtml(locList[j]));
                          
                          
                          var tem = LocationStore.getAt(locIndex).data.vehicles;
                          if(tem instanceof Array)
                           {
                                                     
                                 for(var i = 0; i < tem.length; i++) {
                                     var record = tem[i];
                                     a1.push(record);
                                     
                                 } 
                                  
                                 
                                   
                           }
                        }
                         VehicleStore.loadData(a1); 
                }
            }
            
                                   
            ]
        });
        var combocheck = Ext.create('Ext.form.ComboBox', {        
        maxHeight: 50,        
        width: 200,
        disabled:true,
        name: 'Accessories',
        id:'hwdfrmSDevice',
        multiSelect: true,
        fieldLabel: 'Accessories',
        store: secondaryDeviceStore,
        valueField: 'InstallationDevices',
        displayField: 'InstallationDevices',
        emptyText : "Select Add-ons",       
        forceSelection: true,
        editable: false,
        queryMode: 'local',
        triggerAction: 'all',
        labelAlign: 'right',
        listWidth: 200,  
        matchFieldWidth: false,
        autoScroll:true,
        //afterSubTpl: '<font color="grey" size="1.5">PEM, Quake, Garmin, Pelican,..</b></font>', 
        listConfig : {          
                getInnerTpl : function() {
                    return '<div  class="x-combo-list-item" ><img src="' + Ext.BLANK_IMAGE_URL + '" class="chkCombo-default-icon chkCombo" /> {InstallationDevices} </div>';
                }
            },
         listeners: {
                   beforeQuery: function(query) { //toa
                  
                                                                   
                               },
                     }
        });
       
         var HardwarePanel = Ext.create('Ext.form.Panel',{
            width:310,
            height:278,
            
            id:'hwdfrm',
            //margin:1,
            frame:true,
            icon:'{!URLFOR($Resource.TOaImages, 'TOaImages/3.png')}',
            title:'Hardware',
            id:'hwdfrm',
            header:true,
            margin:'0 1 1 1',
            disabled:true,
            layout: 
            {
                type: 'table',
                columns: 1,
                tableAttrs: 
                {
                    style: 
                    {
                        //width: '50%',
                        //align:'center',
                        
                    }
                }
            },
            bodyPadding: 0,
            defaults: 
            {
                labelAlign: 'right'
                //bodyPadding: 15,
            },

            items: [
                { 
                     fieldLabel: 'DeviceType',
                     tabIndex:14,
                     name: 'DeviceType',
                     triggerAction: 'all',
                     width:230,
                     xtype: 'combo', 
                     id:'hwdfrmPDevice',
                     listWidth: 400,   
                     //disabled:true,
                     forceSelection: false,                 
                     queryMode: 'local',
                     store:primaryDeviceStore,                     
                     displayField:'InstallationDevices' ,
                    // valueField:'InstallationDevices' ,
                     listeners: {
                      
                     }
                           
                },
                {
                    xtype: 'textfield',
                    tabIndex:15,
                    fieldLabel: 'Serial',
                    name:'Serial',
                    width:200
                    
                },
                        
                {
                    xtype: 'textfield',
                    tabIndex:16,
                    fieldLabel: 'Old Serial(for swap)',
                    name:'OldSerial',
                    id:'swapfield',
                    disabled:true,
                    width:200
                },
                {
                     fieldLabel: 'HarnessType',
                     tabIndex:17,
                     name: 'Harness',
                     xtype: 'combo', 
                     id:'hwfrmHarness',                     
                     queryMode: 'local',
                     store:harnessCategoryStore,
                     displayField:'harnessCategory',
                     valueField:'harnessCategory',
                     matchFieldWidth: false,
                     disabled:false,
                     width:200
                    
                },
                {
                     
                     
                     xtype: combocheck, 
                                     
                     width:200
                     
                    
                },
                {   
                   
                    
                    fieldLabel: 'Return To',
                     tabIndex:17,
                     name: 'DeviceReturned',
                     xtype: 'combo', 
                     id:'hwdfrmRetIns',                     
                     queryMode: 'local',
                     store:deviceRetCategoryStore,
                     displayField:'deviceRetCategory',
                     valueField:'deviceRetCategory',
                     matchFieldWidth: false,
                     disabled:true,
                     width:200
                     
                     
                },
                
                {
                     xtype: SensorGrid, 
                     tabIndex:19,
                     width:'100%'
                }                           
                ]
                        
                //renderTo:gridSpace
                        
                
             
        });//HardwarePanel
        
        var HardwareButtonPanel = Ext.create('Ext.panel.Panel',{
            frame:true,
            //cls: 'left-right-buttons',
            height:40,
            margin:'0 0 0 2',
            width:310,
         
            buttons:[
            {
                //icon:'{!URLFOR($Resource.TOaImages, '4.png')}',
                text:'<img style="float:left;margin-left:-2px;" src="{!URLFOR($Resource.TOaImages,'TOaImages/button_icon_5.png')}"/><img style="float:left" src="{!URLFOR($Resource.TOaImages,'TOaImages/4.png')}"/><span style="font-size:10px;">Add Vehicle Record</span>',
                xtype:'button',
              //  margin:'0 0 0 -2',
                flex:1,
                
                id:'addVehicleButton',
                //tooltip:'Add Vehicle Record',
                //text:'Add Vehicle Record',
                disabled:true,
                id:'addVehicleButton',
                handler:function()
                {
                    var form = Ext.getCmp('vehfrm').getForm();
                    var hwdForm = Ext.getCmp('hwdfrm').getForm();
                    if(form.isValid() && hwdForm.isValid())
                    {
                                                   
                    var t=form.getValues();
                    var t1=hwdForm.getValues();
                    var data = [];
                    data.push(t);
                    var data1 = [];
                    data1.push(t1);
                    var sensorArray = [];
                    
                   
                    SensorStore.each(function(r){
                    sensorArray.push(r.data.SensorLabel);
                    });
                    var noSensors=true;
                     for(var ab=1;ab<=SensorStore.getCount();ab++)
                     {
                             
                       if(sensorArray[ab-1]!=null && sensorArray[ab-1]!=undefined && sensorArray[ab-1].trim()!='' &&  SensorStore.getAt(ab-1).data.SensorName!=undefined &&  SensorStore.getAt(ab-1).data.SensorName.trim()!='')
                       {
                            noSensors=false;
                            break;
                        }
                      }
                     if((t1.DeviceType!=undefined && t1.DeviceType.trim()!='' )||(t1.Accessories!=undefined && t1.Accessories instanceof Array)||(noSensors==false))
                     { 
                    //alert('res is '+sensorArray[3]);
                    
                    var mergedObject = Ext.merge(data, data1);
                    //IT-698 - Fix - decodeHTML
                    var locIndex = LocationStore.find('LocationName',decodeHtml(locList1[0]));
                    var record = LocationStore.getAt(locIndex).data.vehicles;
                  
                    var temp=[];
                    if(record instanceof Array)
                    {
                        for(var i=0;i<record.length;i++)
                        {
                            temp.push(record[i]);
                        }
                        temp.push(mergedObject[0]);
                        VehicleStore.loadData(temp);
                        
                        //record.push(mergedObject);
                        //VehicleStore.load(record);
                        LocationStore.getAt(locIndex).set('vehicles',temp); 
                        LocationStore.getAt(locIndex).set('Used','('+temp.length+')');
                        
                    }
                    else
                    {
                        var temp12=[];
                        temp12.push(mergedObject[0]);
                        VehicleStore.loadData(temp12);
                        LocationStore.getAt(locIndex).set('vehicles',temp12); 
                        LocationStore.getAt(locIndex).set('Used','('+temp12.length+')');
                        
                    }
                    updateBalaceOnAdd(t1.Harness,t1.DeviceType,t1.Accessories,t.Service );
                    
                    
                    for(var i = 0; i < VehicleStore.getCount(); i++) 
                    {
                        if(VehicleStore.getAt(i).data.LocationName.length == 0)
                        {
                             VehicleStore.getAt(i).set('LocationName',locList1[0]);
                        }
                        if(i == VehicleStore.getCount()-1)
                        {
                             for(var ab=1;ab<=SensorStore.getCount();ab++)
                             {
                             
                             if(sensorArray[ab-1]!=null && sensorArray[ab-1]!=undefined && sensorArray[ab-1].trim()!='')
                             {
                                //var sensorName='Sensor'+ab;
                                sensorName = SensorStore.getAt(ab-1).data.SensorName;
                                var myString = sensorName;
                                var stringLength = myString.length; 
                                var lastChar = myString.charAt(stringLength - 1);
                                                                
                                var PIndex=PurchasedServiceStore.findBy(function(record) {
                                         //if (record.get('service') == t.Service && ((record.get('device').replace(/\s/g,'')).toLowerCase()==sensorName.toLowerCase())) 
                                          if (record.get('service') == t.Service && ((record.get('device')).toLowerCase()==sensorName.toLowerCase())) {
                                             return true;
                                          }
                                          return false;
                                          });
                                               
                                if(PIndex!=-1)
                                {                
                                    var gpqty=PurchasedServiceStore.getAt(PIndex).data.balance;
                                    if(gpqty>=1)
                                    {              
                                        PurchasedServiceStore.getAt(PIndex).set('balance',gpqty-1);
                                        VehicleStore.getAt(i).set('Sensor'+lastChar,sensorArray[ab-1]);
                                    }
                                 }  
                                   
                                
                             }
                             else
                             {
                                // VehicleStore.getAt(i).set('Sensor'+ab,'Sensor'+ab);
                             }
                            
                             }
                        }
                    }
                    form.reset();
                    hwdForm.reset();
                    Ext.getCmp('SensorGrid').getStore().removeAll();
                    Ext.getCmp('SensorGrid').getStore().sync();
                    var arr=[];
                   // arr.push('Sensor1');
                   // arr.push('Sensor2');
                    //SensorStore.loadData(arr);
                   
                   checkForSubmitEnable();
                   checkForAddEnable();
                   }
                   else
                   {
                    Ext.Msg.alert('Select Hardware','Select hardware to Install/Swap/Transfer');
                   }
                   }
                }
            },
            {
                xtype:'button',
                id:'udateVehicleButton',
                 flex:1,
                //tooltip:'Update Vehicle Record',
                
                disabled:true,
                text:'<img style="float:left;" src="{!URLFOR($Resource.TOaImages,'TOaImages/button_icon_6.png')}"/><span style="font-size:10px;">Update Vehicle Record</span>',
                handler:function()
                {
                     
                     var vehid = Ext.getCmp('vehfrmId').getValue();
                     var recordIndex = VehicleStore.find('id',vehid);
                     var form = Ext.getCmp('vehfrm').getForm();                     
                     var vehformrec = form.getValues();
                     var hwdform = Ext.getCmp('hwdfrm').getForm();
                     if(form.isValid() && hwdform.isValid())
                    {
                     var hwdformrec = hwdform.getValues();
                     var t=form.getValues();
                    
                     var sensorArray = [];
                    
                   
                    SensorStore.each(function(r){
                    sensorArray.push(r.data.SensorLabel);
                    });
                     var noSensors=true;
                     for(var ab=1;ab<=SensorStore.getCount();ab++)
                     {
                             
                       if(sensorArray[ab-1]!=null && sensorArray[ab-1]!=undefined && sensorArray[ab-1].trim()!='' &&  SensorStore.getAt(ab-1).data.SensorName!=undefined &&  SensorStore.getAt(ab-1).data.SensorName.trim()!='')
                       {
                            noSensors=false;
                            break;
                        }
                      }
                     if( (hwdformrec.DeviceType!=undefined && hwdformrec.DeviceType.trim()!='' )||(hwdformrec.Accessories!=undefined && hwdformrec.Accessories instanceof Array)||(noSensors==false))
                     { 
                     var oldservice=VehicleStore.getAt(recordIndex).data.Service;
                    var oldHarness=VehicleStore.getAt(recordIndex).data.Harness;
                    var oldDeviceType=VehicleStore.getAt(recordIndex).data.DeviceType;
                    var oldAccessories=VehicleStore.getAt(recordIndex).data.Accessories;
                     
                     addBalaceBack(oldservice,oldHarness,oldDeviceType,oldAccessories);
                     updateBalaceOnAdd(hwdformrec.Harness,hwdformrec.DeviceType,hwdformrec.Accessories,vehformrec.Service );
                     
                     var mergedObject = Ext.merge(vehformrec, hwdformrec);
                     
                     var record=VehicleStore.getAt(recordIndex).set(mergedObject);
                     if(Ext.getCmp('hwdfrmSDevice').disabled == true)
                     VehicleStore.getAt(recordIndex).set('Accessories','');
                    
                     if(Ext.getCmp('hwdfrmPDevice').disabled == true)
                     VehicleStore.getAt(recordIndex).set('DeviceType','');
                    
                    var sensor1=VehicleStore.getAt(recordIndex).data.Sensor1;
                    var sensor2=VehicleStore.getAt(recordIndex).data.Sensor2;
                    var sensor3=VehicleStore.getAt(recordIndex).data.Sensor3;
                    var sensor4=VehicleStore.getAt(recordIndex).data.Sensor4;
                    var sensor5=VehicleStore.getAt(recordIndex).data.Sensor5;
                    var sensor6=VehicleStore.getAt(recordIndex).data.Sensor6;
                    
                    if(sensor1!=null && sensor1!=undefined && sensor1.trim()!='')
                    {                    
                        addBalaceBackSensor(oldservice,'sensor1');                    
                    }
                    if(sensor2!=null && sensor2!=undefined && sensor2.trim()!='')
                    {
                        addBalaceBackSensor(oldservice,'sensor2');
                    }
                    if(sensor3!=null && sensor3!=undefined && sensor3.trim()!='')
                    {
                        addBalaceBackSensor(oldservice,'sensor3');
                    }
                    if(sensor4!=null && sensor4!=undefined && sensor4.trim()!='')
                    {
                        addBalaceBackSensor(oldservice,'sensor4');
                    }
                    if(sensor5!=null && sensor5!=undefined && sensor5.trim()!='')
                    {
                        addBalaceBackSensor(oldservice,'sensor5');
                    }
                    if(sensor6!=null && sensor6!=undefined && sensor6.trim()!='')
                    {
                        addBalaceBackSensor(oldservice,'sensor6');
                    }
                    
                    
                     
                     VehicleStore.getAt(recordIndex).set('Sensor1',null);
                     VehicleStore.getAt(recordIndex).set('Sensor2',null);
                     VehicleStore.getAt(recordIndex).set('Sensor3',null);
                     VehicleStore.getAt(recordIndex).set('Sensor4',null);
                     VehicleStore.getAt(recordIndex).set('Sensor5',null);
                     VehicleStore.getAt(recordIndex).set('Sensor6',null);
                    
                        if(VehicleStore.getAt(recordIndex).data.LocationName.length == 0)
                        {
                             VehicleStore.getAt(recordIndex).set('LocationName',locList1[0]);
                        }
                       
                             for(var ab=1;ab<=SensorStore.getCount();ab++)
                             {
                             
                             if(sensorArray[ab-1]!=null && sensorArray[ab-1]!=undefined && sensorArray[ab-1].trim()!='')
                             {
                               
                                sensorName = SensorStore.getAt(ab-1).data.SensorName;
                                var myString = sensorName;
                                var stringLength = myString.length; 
                                var lastChar = myString.charAt(stringLength - 1);
                                                                
                                var PIndex=PurchasedServiceStore.findBy(function(record) {
                                         //if (record.get('service') == t.Service && ((record.get('device').replace(/\s/g,'')).toLowerCase()==sensorName.toLowerCase())) 
                                          if (record.get('service') == t.Service && ((record.get('device')).toLowerCase()==sensorName.toLowerCase())) {
                                             return true;
                                          }
                                          return false;
                                          });
                                               
                                if(PIndex!=-1)
                                {                
                                    var gpqty=PurchasedServiceStore.getAt(PIndex).data.balance;
                                    if(gpqty>=1)
                                    {              
                                        PurchasedServiceStore.getAt(PIndex).set('balance',gpqty-1);
                                        VehicleStore.getAt(recordIndex).set('Sensor'+lastChar,sensorArray[ab-1]);
                                    }
                                 }  
                                   
                                
                             }
                             else
                             {
                                // VehicleStore.getAt(recordIndex).set('Sensor'+ab,'Sensor'+ab);
                             }
                            
                             }
                        
                    
                     form.reset();
                     hwdform.reset();
                     checkForAddEnable();
                     Ext.getCmp('udateVehicleButton').disable();
                     Ext.getCmp('SensorGrid').getStore().removeAll();
                    Ext.getCmp('SensorGrid').getStore().sync();
                    var arr=[];
                  
                    SensorStore.loadData(arr);
                    Ext.getCmp('toaVehicle').getSelectionModel().deselectAll();
                     
                   }else
                   {
                            Ext.Msg.alert('Select Hardware','Select hardware to Install/Swap/Transfer');
                   }
                   }
                }        
                
            }]
            //renderTo:gridSpace
          });//HardwareButtonPanel
                
        var OuterHardwarePanel = Ext.create('Ext.panel.Panel', {           
              height:323,          
              border : false,
              //bodyPadding: '0 0 0 20',                    
              layout:
              {
                   type:'vbox'
                   //pack:'center',             
               
              },         
              items: [
              {
                  xtype : HardwarePanel
              },
              {
                  xtype : HardwareButtonPanel
              }
              ]
                  //renderTo:gridSpace
         });//OuterHardwarePanel
       
         
         var OuterLeftPanel = Ext.create('Ext.panel.Panel', {           
             //height:900,          
             border : false,
            
             //width:520,                       
             layout:
             {
                 type:'vbox'
                //pack:'center',
               
             },
             items: [
             {
                 xtype: InstructionPanel
             },
                     
             {
                 xtype: 'container',
                 layout: 'hbox',
                 //width:230,
                 items: [{
                     xtype: PurchasedService                 
                }, 
                {
                    xtype: ServiceLocationPanel,
                    width:230               
               }]
            }
            ]
            //renderTo:gridSpace
         });
        
         
        var OuterTopPanel = Ext.create('Ext.panel.Panel', {           
             //height:350,          
             border : false,
             margin: '0 0 0 5',
             //width:600,  
             //margin:10,         
             layout:
             {
                 type:'hbox'
                //pack:'center',
               
             },
             items: [
             {
                 xtype: OuterLeftPanel
                 //width:600,
             },
             {
                 xtype: Vehicle_form,
                 width:550
             },
             {
                 xtype: OuterHardwarePanel
             }
                     
             
            ]
            //renderTo:gridSpace
         });
         
       
         var ThankYouOnSave= Ext.create('Ext.panel.Panel', {
             width   : 500,
             //height:200,
             autoHeight:true,
             frame: true,
             border:true,             
             bodyPadding:'0 15 5 20', 
             id:'thxOnSave',
             title: '&nbsp;',           
             //header:true,
             //layout: 'hbox',
             items: [{
                
                     
                     html:'<p style="color: #909090;font-size: 13px;" id="thankUMsg">&nbsp;</p><p style="font-size: 16px;">{!$Label.Thank_you}</p>',
                     border:false
                 }]
         
         
        });//ThankYouOnSave
        
        var ThankYouOnSaveOuterPanel = Ext.create('Ext.panel.Panel', {           
              border : false,
            frame:false,
            margin:'50 0 0 0',     
            //frame: false, 
            //autoEl: 'center',            
            layout: {
                        type: 'vbox',
                        pack: 'top',    
                        align: 'center'                  
                    },         
             items: [
            
             {            
                 xtype:ThankYouOnSave
             }
             ]
         });//ThankYouOnSaveOuterPanel 
         
          var FileUploadPanel= Ext.create('Ext.panel.Panel', {
             width   : 500,
             height:260,
             frame: true,
             border:false,             
             bodyPadding:'0 20 5 20', 
            
             title: 'Upload file',           
            // header:true,
             layout: 'vbox',
             items: 
             [
             
             {
                 html:  '<div id="myform-apex" style="width:450px;border-style:none"></div>',
                 
                 border : false
             },
             
            
             {
                xtype:'button',
                id:'FinshButton',
                //tooltip:'Finish',
                   width: 100,
                 //left: 345,
                 margin: '20 0 0 347', 
                text:'Finish',
                handler:function()
                {
                        buttonflag = true;
                        document.getElementById("thankUMsg").innerHTML = '{!$Label.Thank_you_on_Submit}<br/><br/>{!$Label.Thank_you_on_Partial_Submit}<br/><br/>{!$Label.ensure_not_junk}';                    
                        Ext.getCmp('theCardWizard').getLayout().setActiveItem(4);
                        SwitchPic(document.getElementById( 'fifth' ),"bc5_r.png");
                        SwitchPic1(document.getElementById( 'fourth' ),"bc4_g.png"); 
                        $("#next").hide();
                        $("#back").hide();
                }
             }
             ]
         
         
        });//FileUploadPanel
         
         var FileUploadOuterPanel = Ext.create('Ext.panel.Panel', {           
            
               border : false,
            frame:false,
            margin:'10 0 0 0',     
            //frame: false, 
            //autoEl: 'center',            
            layout: {
                        type: 'vbox',
                        pack: 'top',    
                        align: 'center'                  
                    },         
             items: [
            {
                    xtype : HeaderPanelForCardFive,
                     border : false
                } ,
                {
                    margin:'50 0 0 0'
                } ,
            
             {            
                 xtype:FileUploadPanel
             }
             ]
         });//ThankYouOnSaveOuterPanel 
         
        var TOApanelLocation = new Ext.create('Ext.TOA.TOApanelLocation', { 
                //header : false,
                height    : h-455,
                margin: '0 0 0 5',
                viewConfig: { 
                stripeRows: false, 
                markDirty:false,
                getRowClass: function(record) { 
                return record.get('isSubmitted')  ? 'child-row' : 'adult-row'; 
                } 
                } ,
                padding:'0 0 0 1',               
                listeners:{
                    select:function(){                        
                                           
                        var myGrid= Ext.getCmp('toaLocation');
                        var selectedRows = myGrid.getSelectionModel().getSelection();
                        if(selectedRows.length)
                        {
                            Ext.getCmp('deleteLoc').enable();
                            if(selectedRows.length==1)
                            {
                                var form = Ext.getCmp('locfrm').getForm();                                                   
                                form.reset();
                                var Location = myGrid.getSelectionModel().getSelection()[0].get('id');
                                Ext.getCmp('locfrmId').setValue(Location);
                                var recordIndex = LocationStore.find('id',Location);                                
                                var locRec=LocationStore.getAt(recordIndex);   
                                var isReadOnly=locRec.data.isSubmitted;
                                if(!isReadOnly)
                                {                             
                                    //form.loadRecord(locRec);       
                                    form.setValues(locRec.data);                         
                                    Ext.getCmp('updateLocBtn').enable();
                                    Ext.getCmp('addLocBtn').disable();
                                }
                                else
                                {
                                    Ext.getCmp('locfrmContry').setValue('USA');
                                    //Ext.Msg.alert('Read Only Record','Location already been submitted, cannot be edited!');
                                }
                            }
                            else
                            {
                                var form = Ext.getCmp('locfrm').getForm();                                                   
                                form.reset();
                                Ext.getCmp('locfrmContry').setValue('USA');
                                Ext.getCmp('updateLocBtn').disable();
                                Ext.getCmp('addLocBtn').enable();   
                            }
                        }  
                        else
                        {
                            Ext.getCmp('deleteLoc').disable();
                        }
                        
                    },
                    deselect:function(){
                            var form = Ext.getCmp('locfrm').getForm();                                                   
                            form.reset();
                            Ext.getCmp('locfrmContry').setValue('USA');
                            Ext.getCmp('updateLocBtn').disable();
                            Ext.getCmp('addLocBtn').enable();
                            var myGrid= Ext.getCmp('toaLocation');
                            var selectedRows = myGrid.getSelectionModel().getSelection();
                            if(selectedRows.length)
                            {
                                Ext.getCmp('deleteLoc').enable();
                               
                            }
                            else
                            {
                                Ext.getCmp('deleteLoc').disable();
                            }
                    }

                }                        

        }); 
        
         var Location_form = Ext.create('Ext.form.Panel',{
                id:'locfrm',
                width:1010,
                frame:true,
                margin: '0 0 12 5',
                title: 'Service Locations',
                layout: {
                    type: 'table',
                    columns: 3,
                    tableAttrs: {
                        style: {
                            width: '100%',
                            float:'right'
                        }
                    }
                },
                bodyPadding: 5,
                defaults: {
                    labelAlign: 'right',
                    bodyPadding: 5
                },

                items: [
                        {
                            name:'id',
                            xtype:'hidden',
                            id:'locfrmId'
                        },
                        { 
                            fieldLabel: 'Location Name',
                            name: 'LocationName',                            
                            xtype: 'textfield',
                            allowBlank: false,
                            tabIndex:1,
                            width:300, 
                            validator: function(v) {
                                if(v.length!=0 && Ext.util.Format.trim(v).length==0)
                                   return 'this field is required ';
                               var found=false;
                               var recId=Ext.getCmp('locfrmId').getValue();                             
                               var recordIndex = LocationStore.find('id', recId); 
                               var oldloc;
                               if(recordIndex!=-1)
                                oldloc=LocationStore.getAt(recordIndex).get('LocationName');    
                               LocationStore.each(function(r){
                                  if(r.data.LocationName==v)
                                  {
                                    if(v!=oldloc)
                                    {
                                        found=true
                                        return false;
                                    }
                                  }
                                });
                                if(found==true)
                                    return 'location alredy created';
                                else    
                                    return true;
                            }   
                            
                        },
                         
                        { 
                            fieldLabel: 'Contact Name',
                            name: 'ContactName',
                            xtype: 'textfield', 
                            tabIndex:8,  
                            width:300,
                            allowBlank:false
                        },
                        { 
                            fieldLabel: 'Alternate Contact Name',
                            name: 'AltContactName',
                            xtype: 'textfield', 
                            tabIndex:13,  
                            width:300,
                            allowBlank:true
                        },                      
                        { 
                            fieldLabel: 'Address Line 1',
                            name: 'GarageAddress1',
                            xtype: 'textfield',   
                            width:300, 
                            tabIndex:2,                         
                            afterSubTpl: '<font color="grey" size="1.5">Street Address, Company Name, C/o</font>',
                            allowBlank:false
                             
                        },
                        {
                            fieldLabel: 'Email',
                            name: 'Email',
                            xtype: 'textfield',
                            tabIndex:9,
                            vtype:'email',   
                            width:300
                        },
                        {
                            fieldLabel: 'Alternate Email',
                            name: 'AltEmail',
                            xtype: 'textfield',
                            tabIndex:14,
                            vtype:'email',   
                            width:300
                        },                      
                        {
                            fieldLabel: 'Address Line 2',
                            name: 'GarageAddress2',
                            width:300, 
                            xtype: 'textfield', 
                            tabIndex:3,
                            afterSubTpl: '<font color="grey" size="1.5">Apartment, Suite, Unit, Building Etc.</font>'
                        },
                        {
                            fieldLabel: 'Phone',
                            name: 'Phone',
                            tabIndex:10,
                            xtype: 'textfield',   
                            width:300,
                            allowBlank:false,
                            
                        },
                        {
                            fieldLabel: 'Alternate Phone',
                            name: 'AltPhone',
                            tabIndex:15,
                            xtype: 'textfield',   
                            width:300,
                            allowBlank:true,
                            
                        },
                        {
                            fieldLabel: 'Country',
                            name: 'Country',
                            xtype: 'combo',
                            tabIndex:4,
                            id:'locfrmContry',
                            valueField:'controlValue',
                            displayField:'controlValue',
                            queryMode: 'local',                            
                            width:300, 
                            store:CountryStateStore,
                            listeners: {
                                change: function(field, newValue, oldValue){
                                            if(oldValue!=null)
                                                Ext.getCmp('locfrmState').setValue(null);                                   
                                }
                            }
                                 
                        },                        
                        {
                            xtype: 'component',
                            fieldLabel: '&nbsp;',
                            labelSeparator: ' ', 
                            height:20
                        },
                        {
                            xtype: 'component',
                            fieldLabel: '&nbsp;',
                            labelSeparator: ' ', 
                            height:20
                        },
                        {
                            fieldLabel: 'State/Province',
                            allowBlank:false,
                            forceSelection:false,
                            name: 'GarageState', 
                            xtype: 'combo',
                            width:300, 
                            tabIndex:5,
                            id:'locfrmState',
                            queryMode: 'local',
                            store:StateStore,
                            displayField:'state',
                            //disabled : true,     
                            valueField:'state',
                            triggerAction: 'all',                           
                            listeners: {
                                       beforeQuery: function(query) { 
                                                                var ctry= Ext.getCmp('locfrmContry').getValue();
                                                                 this.store.clearFilter();
                                                                 if (ctry!=null && ctry!=undefined) {                                                                    
                                                                       this.store.filter( { property: 'country', value: ctry, exactMatch: true } );
                                                                  }
                                                                  else{
                                                                    this.store.filter( { property: 'country', value: 'dirty', exactMatch: true } );
                                                                  }
                                                                  
                                                   }
                            }
                        }, 
                        {
                            xtype: 'component',
                            fieldLabel: '&nbsp;',
                            labelSeparator: ' ', 
                            height:20
                        },
                        {
                            xtype:'button',
                            text:'Update Service Location', 
                            width:150, 
                            tabIndex:11,
                            id:'updateLocBtn',
                            disabled:true,
                            //tooltip:'Update Service Location',                            
                            margin: '0 0 0 150',                                                                   
                            handler: function() {  
                                var form = Ext.getCmp('locfrm').getForm();
                                  if(form.isValid()){ 
                                var record=form.getValues();
                                var recId=Ext.getCmp('locfrmId').getValue();                                
                                var recordIndex = LocationStore.find('id', recId); 
                                LocationStore.getAt(recordIndex).set(record);                               
                                form.reset();
                                Ext.getCmp('locfrmContry').setValue('USA');
                                Ext.getCmp('updateLocBtn').disable();
                                Ext.getCmp('addLocBtn').enable();
                                var myGrid= Ext.getCmp('toaLocation');
                                myGrid.getSelectionModel().deselectAll();
                                }
                            }
                        },                        
                        {
                            fieldLabel: 'City',
                            name: 'GarageCity',
                            width:300, 
                            tabIndex:6,
                            xtype: 'textfield',
                            allowBlank:false 
                        },
                        {
                            xtype: 'component',
                            fieldLabel: '&nbsp;',
                            labelSeparator: ' ', 
                            height:20
                        },
                         {
                            xtype:'button',
                            text:'Save Service Location',
                            width:150, 
                            tabIndex:11,
                            margin: '0 0 0 150',
                            id:'addLocBtn', 
                           //formBind: true,                           
                            //rowspan: 3,  
                            //tooltip:'Save Service Location',                                    
                            handler: function() {  
                                var form = Ext.getCmp('locfrm').getForm();
                                if(form.isValid()){
                                    //IT-548 - Begin
                                    var locN = form.findField('LocationName').getValue();
                                    locN = locN.replace(/\s+/g,' ');
                                    locN = locN.replace(/^\s+|\s+$/g,'');
                                    form.findField('LocationName').setValue(locN);
                                    //IT-548 - End
                                    var t=form.getValues();
                                    var data = [];
                                    data.push(t);
                                    LocationStore.each(function(r){
                                      data.push(r.data);
                                    });
                                    
                                    //var r1 = Ext.create('Ext.TOA.LocationModel', {});                 
                                    //LocationStore.insert(0, t); 
                                    LocationStore.loadData(data);                                    
                                    form.reset();
                                    Ext.getCmp('locfrmContry').setValue('USA');
                                    Ext.getCmp('updateLocBtn').disable();
                                    Ext.getCmp('addLocBtn').enable();
                                }
                                else{
                                    //do nothing
                                }
                            }
                            
                         },
                        {
                            fieldLabel: 'Zip/Postal Code',
                            name: 'Zip', 
                            width:300,    
                            tabIndex:7, 
                            id:'zc',                
                            xtype: 'textfield',
                            
                            validator:function(v1){ <!-- Updated Zip Code Validation to accept digits & length should be exactly 5 digits : IT-1876 - Sunil Kumar-->
                               if(v1.length != 5){
                                   return 'Zip/Postal code must contain five digits only';
                                }
                                else if(/[^0-9]/.test(v1)){
                                    return 'Zip/Postal code must contain numeric only';
                                }
                                else{
                                    //console.log('valid zip code');
                                    return true;
                                }                               
                            }     

                        }, 
                        {
                            xtype: 'component',
                            fieldLabel: '&nbsp;',
                            labelSeparator: ' ', 
                            height:20
                        },  
                        {
                            xtype:'button',
                            text:'Clear Form', 
                            tabIndex:12,
                            width:150, 
                            //id:'updateLocBtn',
                            //tooltip:'Clear Form',                            
                            margin: '0 0 0 150',                                                                   
                            handler: function() {   
                                var form = Ext.getCmp('locfrm').getForm();                                                   
                                form.reset();
                                Ext.getCmp('locfrmContry').setValue('USA');
                                var myGrid= Ext.getCmp('toaLocation');
                                myGrid.getSelectionModel().deselectAll();
                                Ext.getCmp('updateLocBtn').disable();
                                Ext.getCmp('addLocBtn').enable();                          
                                
                                }
                        },
                         

                       
                ]
        });//loc_form               
        var outerLocationPanel = Ext.create('Ext.panel.Panel', {                    
            border : false,            
            frame: false, 
            //overflow    :'auto',
            //autoScroll  : true,   
                            
            items: [
                {
                    xtype : HeaderPanelForCardTwo
                } ,
                {
                      xtype : Location_form
                     
                      
                },
                {
                      xtype : TOApanelLocation
                     
                }
                ]
         }); 
         var Panel4 = Ext.create('Ext.panel.Panel', {                    
            border : false,            
            frame: false, 
            //overflow    :'auto',
            //autoScroll  : true,   
                            
            items: [
                {
                    xtype : HeaderPanelForCardThree
                } ,
                {
                      xtype : OuterTopPanel
                     
                      
                },
                {
                      xtype : TOApanelVehicle,
                     
                }
                ]
         }); 
          
         
       
         
         
         
         
        var theCardWizard = Ext.create('Ext.panel.Panel', {
             //title: 'Vehicle Entry Wizard',
             id:'theCardWizard',
             //autoEl: 'center',
             border:true,
             bodyPadding:'5 0 0 0',
             //width: w-20,
             height: h-150,
             //height: h-200,
             //activeItem: 0,
                layout: {
                    type: 'card'
                    //deferredRender: true,
                },
             frame: false,
             //bodyStyle: 'padding:15px',
             defaults: 
             {
                 // applied to each contained panel
                 border: false
             },         
            
            // the panels (or "cards") within the layout
            items: [
            {
                id: 'card-0',
                //xtype : CustInfOuterPanel,
                xtype :CardZeroPanel 
                   

            },
            {
                id: 'card-1',
                xtype: CardOnePanel 
            },
            {
                id:'card-2',        
                xtype:outerLocationPanel
            },
            {
                id:'card-3',
                xtype: Panel4
                //xtype: OuterTopPanel 

            },
            {
                id:'card-4',               
                xtype:ThankYouOnSaveOuterPanel

            },
            {
                id:'card-5',               
                xtype:FileUploadOuterPanel
                //html:  '<div id="myform-apex"></div>'
            }
           ]

           //renderTo: gridSpace


        });//theCardWizard
        
        
        Ext.create('Ext.container.Container',{   
            overflow    :'auto',
            autoScroll  : true,             
            items:
            [
            
            {
                xtype:theCardWizard
            },
            {
                xtype:ButtonPanel
            }],
            renderTo: gridSpace
                
        });//container
    });//Ext.onReady
    function addBalaceBackSensor(oldservice,snr)
    {
        var PIndex=PurchasedServiceStore.findBy(function(record) {
            if (record.get('service') == oldservice && ((record.get('device').replace(/\s/g,'')).toLowerCase()==snr)) {
                return true;
            }
            return false;
        });
        
        if(PIndex!=-1)
        {                
            var gpqty=PurchasedServiceStore.getAt(PIndex).data.balance;
            PurchasedServiceStore.getAt(PIndex).set('balance',gpqty+1);
        
        }   
                        
     }
     function removePicklistOptionWhenBalaceZero()
     {
                var addons=[];
                secondaryDeviceStore.each(function(r,id){
                    var rec=r.data;
                    var PIndex=PurchasedServiceStore.findBy(function(record) {
                                         if (record.get('service') ==rec.InstallType && (record.get('device')==rec.InstallationDevices) && (record.get('balance')>0) ) {
                                             return true;
                                          }
                                          return false;
                                          });
                   if(PIndex==-1){
                        addons.push(r);
                        //var ridx=secondaryDeviceStore.getById(id);
                        //secondaryDeviceStore.removeAt(ridx);
                   }
                                         
                    
                });
                 secondaryDeviceStore.remove(addons);
                               
     }
     function checkForSubmitEnable()
    {
        var flag=false;
        LocationStore.each(function(record) {
      
         var locationVehicles=record.get('vehicles');
         for(var i=0;i<locationVehicles.length;i++)
         {
          if(locationVehicles[i].isSubmitted==false)
            {
                flag=true; 
                    return;
            }
         }
         }); 
         var submitButton= Ext.getCmp('submit');
         if(flag==true)
         {
             submitButton.enable();
          }
          if(flag==false)
          {
            submitButton.disable();
          } 
    }
   
     function checkForAddEnable()
    {
        var flag=true;
        PurchasedServiceStore.each(function(record) {
        if (parseFloat(record.get('balance')) >0) {
                    flag=false; 
         }
         }); 
         var addbutton=Ext.getCmp('addVehicleButton'); 
         if(flag==true)
         {
             addbutton.disable();
          }
          if(flag==false)
          {
            addbutton.enable();
          } 
    }
      function updateBalaceOnAdd(harness,device,Accessories,Service )
     {
       
                    if(device!=null && device!=undefined && device.trim()!='' && Service!=null && Service!=undefined && Service.trim()!='')
                    {
                       
                            var PIndex=PurchasedServiceStore.findBy(function(record) {
                                         if (record.get('service') == Service && (record.get('Devicetype')=='PrimaryDevice') && (record.get('balance') > 0)) {
                                             return true;
                                          }
                                          return false;
                                          });
                            if(PIndex!=-1)
                            {                
                                var gpqty=PurchasedServiceStore.getAt(PIndex).data.balance; 
                                //alert(gpqty);             
                                PurchasedServiceStore.getAt(PIndex).set('balance',gpqty-1);
                                if(gpqty==1)
                                {
                                   
                                    
                                    //Ext.getCmp('hwdfrmPDevice').disable();
                                }
                            }else{
                                  console.log('device not in purchased services');
                            }
                                                                       
                    }
                    if(Accessories instanceof Array && Service!=null && Service!=undefined && Service.trim()!='')
                    {
                        for(var j=0;j<(Accessories).length;j++)
                        {
                            var PIndex=PurchasedServiceStore.findBy(function(record) {
                                         if (record.get('service') == Service && (record.get('device')==Accessories[j])) {
                                             return true;
                                          }
                                          return false;
                                          });
                            if(PIndex!=-1)
                            {                
                                var gpqty=PurchasedServiceStore.getAt(PIndex).data.balance;              
                                PurchasedServiceStore.getAt(PIndex).set('balance',gpqty-1);
                                if(gpqty==1)
                                {
                                    var DIndex=secondaryDeviceStore.findBy(function(record) {
                                                if (record.get('InstallType') == Service && (record.get('InstallationDevices')==Accessories[j])) {
                                                 return true;
                                              }
                                              return false;
                                              });
                                    if(DIndex!=-1)
                                    {          
                                        secondaryDeviceStore.removeAt(DIndex);
                                    }else{
                                        console.log('device not in Accessories');
                                    }
                                }
                            }else{
                                  console.log('device not in purchased services');
                                
                            }
                            
                         }                                              
                    }
     }
     function rePopulateStores(oldservice,oldHarness,oldDeviceType,oldAccessories){
          
            if(oldDeviceType!=null && oldDeviceType!=undefined && oldDeviceType.trim()!='' && oldservice!=null && oldservice!=undefined && oldservice.trim()!='')
            {
               
                Ext.getCmp('hwdfrmPDevice').enable();
            }
            if(oldAccessories!=null && oldAccessories!=undefined && oldAccessories.trim()!='' && oldservice!=null && oldservice!=undefined && oldservice.trim()!='')
            {
                var addons=oldAccessories.split(',');
                secondaryDeviceStore.clearFilter();
                //commented by kiran
               for(var i=0;i<addons.length;i++)
                {
                    var DIndex=secondaryDeviceStore.findBy(function(record) {
                            if (record.get('InstallType') == oldservice && (record.get('InstallationDevices')==addons[i])) {
                             return true;
                          }
                          return false;
                          });
                        if(DIndex==-1)
                        {          
                            var r1 = Ext.create('OrderLineSecondaryDeviceModel', {'InstallationDevices':addons[i],'InstallType':oldservice});
                            secondaryDeviceStore.insert(0,r1);
                        }
                }
                
            }
        }
        function addBalaceBack(oldservice,oldHarness,oldDeviceType,oldAccessories){
          
            if(oldDeviceType!=null && oldDeviceType!=undefined && oldDeviceType.trim()!='' && oldservice!=null && oldservice!=undefined && oldservice.trim()!='')
            {
                //Fix for balance cirrection - Begin - IT-256
                var pIndexNOZERO ;
                var pIndexZERO ;
                PurchasedServiceStore.each(function(r){
                    if (r.get('service') == oldservice && (r.get('Devicetype')=='PrimaryDevice')) {
                        if((r.get('balance') < r.get('orderQty')) && r.get('balance') != 0){
                            pIndexNOZERO = PurchasedServiceStore.indexOf(r);   
                        } else if((r.get('balance') < r.get('orderQty')) && r.get('balance') == 0){
                            pIndexZERO = PurchasedServiceStore.indexOf(r);    
                        }
                    }
                });
                
                var PIndex = -1;
                
                if(pIndexNOZERO != undefined){
                    PIndex = pIndexNOZERO;
                } else if(pIndexZERO != undefined){
                    PIndex = pIndexZERO;    
                }
                //Fix for balance cirrection - End - IT-256
                //Commented as part of IT - 256
                /*
                var PIndex=PurchasedServiceStore.findBy(function(record) {
                                 if (record.get('service') == oldservice && (record.get('Devicetype')=='PrimaryDevice')) {
                                     return true;
                                  }
                                  return false;
                                  });*/
                    if(PIndex!=-1)
                    {                
                        var gpqty=PurchasedServiceStore.getAt(PIndex).data.balance;              
                        PurchasedServiceStore.getAt(PIndex).set('balance',gpqty+1);
                        //alert('added back');
                        
                    }else{
                          console.log('device not in purchased services');
                    }
            }
            if(oldAccessories!=null && oldAccessories!=undefined && oldAccessories.trim()!='' && oldservice!=null && oldservice!=undefined && oldservice.trim()!='')
            {
                var addons=oldAccessories.split(',');
                for(var i=0;i<addons.length;i++)
                {
                    var PIndex=PurchasedServiceStore.findBy(function(record) {
                                 if (record.get('service') == oldservice && (record.get('device')==addons[i])) {
                                     return true;
                                  }
                                  return false;
                                  });
                    if(PIndex!=-1)
                    {                
                        var gpqty=PurchasedServiceStore.getAt(PIndex).data.balance;              
                        PurchasedServiceStore.getAt(PIndex).set('balance',gpqty+1);
                        
                    }else{
                          console.log('device not in purchased services');
                    }
                }
            }
        }
        Ext.define('SensorModel', { //Defining a model, which is like an object
            extend  : 'Ext.data.Model',
            fields  : [
                        
                        {name: 'SensorName'},
                        {name: 'SensorLabel'}
                        
                        
                      ]
        });
        var SensorStore = Ext.create('Ext.data.ArrayStore', { //Create a store, which is like collection of records with sorting and grouping capability
                            model : 'SensorModel', //Associate your store with Model
                          expandData: true // this is tied to ArrayStore#loadData only
                           
                        });
        var defaultSensors=function ()
        {
            var data=[];
            data.push('Sensor1');
            data.push('Sensor2');
            SensorStore.loadData(data);
            alert('sensors loaded');
            
        }
        //defaultSensors();
        Ext.define('OrderModel', { //Defining a model, which is like an object
            extend  : 'Ext.data.Model',
            fields  : [
                        {name: 'Id1', type: 'string'},
                        {name: 'name', type: 'string'},
                        {name: 'address', type: 'string'},
                        {name: 'phone', type: 'string'},
                        {name: 'usrname', type: 'string'},
                        {name: 'usremail', type: 'string'},
                        {name: 'usrphone', type: 'string'},
                        {name: 'childacc',type: 'string'}
                        
                      ]
        });
        
        var OrderStore = Ext.create('Ext.data.Store', { //Create a store, which is like collection of records with sorting and grouping capability
                            model       : 'OrderModel', //Associate your store with Model
                            proxy       : {
                                            type    : 'memory',
                                            reader  : {
                                                type : 'json'
                                            }
                                          }
        });
        
        
        Ext.define('PurchasedServiceModel', { //Defining a model, which is like an object
            extend  : 'Ext.data.Model',
            fields  : [
                        {name: 'service', type: 'string'},
                        {name: 'device', type: 'string'},
                        {name: 'orderQty', type: 'string'},
                        {name: 'balance', type: 'string'}
                      ]
        });
        
        Ext.define('PurchasedServiceModel', { //Defining a model, which is like an object
            extend  : 'Ext.data.Model',
            fields  : [
                        {name: 'service', type: 'string'},
                        {name: 'device', type: 'string'},
                        {name: 'orderQty', type: 'string'},
                        {name: 'Devicetype', type: 'string'},                       
                        {name: 'balance', type: 'int'}
                      ]
        });
        
        
         var PurchasedServiceStore = Ext.create('Ext.data.Store', { //Create a store, which is like collection of records with sorting and grouping capability
                            model       : 'PurchasedServiceModel', //Associate your store with Model
                            proxy       : {
                                            type    : 'memory',
                                            reader  : {
                                                type : 'json'
                                            }
                                          }
        });
       
        
              
         Ext.define('OrderLinePrimaryDeviceModel', { //Defining a model, which is like an object
            extend  : 'Ext.data.Model',
            fields  : [
                        
                        {name: 'InstallationDevices', type: 'string'}
                        
                                              
                      ]
        });
         Ext.define('OrderLineSecondaryDeviceModel', { //Defining a model, which is like an object
            extend  : 'Ext.data.Model',
            fields  : [
                        {name: 'Id1', type: 'string'},
                        {name: 'InstallationDevices', type: 'string'},
                        
                        {name: 'InstallType', type: 'string'}
                        
                      ]
        });
        
        Ext.define('FuelTypeModel', { //Defining a model, which is like an object
            extend  : 'Ext.data.Model',
            fields  : [
                        //{name: 'harnessCategory', type: 'string'},
                        {name: 'FuelType'}
                        
                        
                      ]
        });
        
        Ext.define('LicenseStateModel', { //Defining a model, which is like an object
            extend  : 'Ext.data.Model',
            fields  : [
                        //{name: 'harnessCategory', type: 'string'},
                        {name: 'LicenseState'}
                        
                        
                      ]
        });
         Ext.define('InstallTypeModel', { //Defining a model, which is like an object
            extend  : 'Ext.data.Model',
            fields  : [
                       
                        {name: 'Installtype'}
                        
                        
                      ]
        });
         var InstallTypeStore = Ext.create('Ext.data.ArrayStore', { //Create a store, which is like collection of records with sorting and grouping capability
                            model       : 'InstallTypeModel', //Associate your store with Model
                           expandData: true // this is tied to ArrayStore#loadData only
                        });
        
        
        var primaryDeviceStore = Ext.create('Ext.data.ArrayStore', { //Create a store, which is like collection of records with sorting and grouping capability
                            model       : 'OrderLinePrimaryDeviceModel', //Associate your store with Model
                          
                           expandData: true // this is tied to ArrayStore#loadData only
                        });
                        
        var secondaryDeviceStore = Ext.create('Ext.data.Store', { //Create a store, which is like collection of records with sorting and grouping capability
                            model       : 'OrderLineSecondaryDeviceModel', //Associate your store with Model
                            proxy       : {
                                            type    : 'memory',
                                            reader  : {
                                                type : 'json'
                                            }
                                          }
                        });  
        var fuelTypeStore = Ext.create('Ext.data.ArrayStore', { //Create a store, which is like collection of records with sorting and grouping capability
                            model       : 'FuelTypeModel', //Associate your store with Model
                           expandData: true // this is tied to ArrayStore#loadData only
                        });
                        
         var LicenseStateStore = Ext.create('Ext.data.ArrayStore', { //Create a store, which is like collection of records with sorting and grouping capability
                            model       : 'LicenseStateModel', //Associate your store with Model
                           expandData: true // this is tied to ArrayStore#loadData only
                        });
                        
        Ext.define('Ext.TOA.LocationModel', { //Defining a model, which is like an object
            extend  : 'Ext.data.Model',
            fields  : [
                        {name: 'Id1', type: 'string'},
                        {name: 'GarageAddress1', type: 'string'},
                        {name: 'GarageAddress2', type: 'string'},
                        {name: 'GarageCity', type: 'string'},
                        {name: 'GarageState', type: 'string'},
                        {name: 'Country', type: 'string'},
                        {name: 'Zip', type: 'string'},
                        {name: 'ContactName', type: 'string'},
                        {name: 'Email', type: 'string'},
                        {name: 'LocationName', type: 'string'},
                        {name: 'Phone', type: 'string'},
                        {name: 'AltContactName', type: 'string'},
                        {name: 'AltEmail', type: 'string'},
                        {name: 'AltPhone', type: 'string'},
                        {name: 'Used',type:'auto'},
                        {name:'isSubmitted', type:'boolean'},
                        {name:'vehicles'}
                        
                      ]
        });
        
       var LocationStore = Ext.create('Ext.data.Store', { //Create a store, which is like collection of records with sorting and grouping capability
                            model       : 'Ext.TOA.LocationModel', //Associate your store with Model
                            proxy       : {
                                            type    : 'memory',
                                            reader  : {
                                                type : 'json'
                                            }
                                          }
                        }); 
        
       Ext.define('Ext.TOA.VehicleModel', { //Defining a model, which is like an object
            extend  : 'Ext.data.Model',
            fields  : [
                        {name: 'Id1', type: 'string'},
                        {name: 'LocationName', type: 'string'},
                        {name: 'Service', type: 'string'},
                        {name: 'VIN', type: 'string'},
                        {name: 'VehicleLabel', type: 'string'},
                        {name: 'OLDVIN', type: 'string'},
                        {name: 'OldVehicleLabel', type: 'string'},
                        {name: 'Year', type: 'string'},
                        {name: 'Make', type: 'string'},
                        {name: 'Model', type: 'string'},
                        {name: 'LicensePlate', type: 'string'},
                        {name:'LicenseState', type:'string'},
                        {name:'Color', type:'string'},
                        {name:'FuelType', type:'string'},
                        {name:'DeviceType', type:'string'},
                        {name:'Serial', type:'string'},
                        {name:'OldSerial', type:'string'},
                        {name:'Harness', type:'string'},
                        {name:'Accessories', type:'string'},
                        {name:'Sensor1', type:'string'},
                        {name:'Sensor2', type:'string'},
                        {name:'Sensor3', type:'string'},
                        {name:'Sensor4', type:'string'},
                        {name:'Sensor5', type:'string'},
                        {name:'Sensor6', type:'string'},
                        {name:'isSubmitted', type:'boolean'}
                        
                      ]
        });
        
        var VehicleStore = Ext.create('Ext.data.Store', { //Create a store, which is like collection of records with sorting and grouping capability
                            model       : 'Ext.TOA.VehicleModel', //Associate your store with Model
                            proxy       : {
                                            type    : 'memory',
                                            reader  : {
                                                type : 'json'
                                            }
                                          }
                        }); 
        Ext.define('CountryStateModel', { //Defining a model, which is like an object
            extend  : 'Ext.data.Model',
            fields  : [
                
                {name:'controlValue'},
                {name:'dependentvalues'}
            ]
        });
        var CountryStateStore = Ext.create('Ext.data.ArrayStore', { //Create a store, which is like collection of records with sorting and grouping capability
            model : 'CountryStateModel', //Associate your store with Model
            //expandData: true ,// this is tied to ArrayStore#loadData only
            proxy       : {
                                            type    : 'memory',
                                            reader  : {
                                                type : 'json'
                                            }
                                          }

        });   
        
        Ext.define('StateModel', { //Defining a model, which is like an object
            extend  : 'Ext.data.Model',            
            fields  : [                           
                {name:'country',type: 'string'},
                {name:'state'}
            ]
        });
        var StateStore = Ext.create('Ext.data.ArrayStore', { //Create a store, which is like collection of records with sorting and grouping capability
            model : 'StateModel', //Associate your store with Model
            expandData: true ,// this is tied to ArrayStore#loadData only
            proxy       : {
                                            type    : 'memory',
                                            reader  : {
                                                type : 'json'
                                            }
                                          }

        });
        Ext.define('DeviceRetCategoryModel', { //Defining a model, which is like an object
            extend  : 'Ext.data.Model',
            fields  : [                       
                        {name: 'deviceRetCategory'}                                              
                      ]
        });
        
        var deviceRetCategoryStore = Ext.create('Ext.data.ArrayStore', { //Create a store, which is like collection of records with sorting and grouping capability
                            model       : 'DeviceRetCategoryModel', //Associate your store with Model
                           expandData: true // this is tied to ArrayStore#loadData only
                        }); 
         Ext.define('HarnessCategoryModel', { //Defining a model, which is like an object
            extend  : 'Ext.data.Model',
            fields  : [                       
                        {name: 'harnessCategory'}                                              
                      ]
        });
        
        var harnessCategoryStore = Ext.create('Ext.data.ArrayStore', { //Create a store, which is like collection of records with sorting and grouping capability
                            model       : 'HarnessCategoryModel', //Associate your store with Model
                           expandData: true // this is tied to ArrayStore#loadData only
                        }); 
    
        
        var cp = new Ext.state.CookieProvider({
        expires: new Date(new Date().getTime()+(1000*60*60*24*30)) //30 days
        });
        Ext.state.Manager.setProvider(cp);
         
        Ext.define('Ext.TOA.TOApanelLocation', { //Defining a panel in order to display our data
            extend      : 'Ext.grid.Panel',
            alias       : 'widget.TOApanelLocation',
            name        : 'TOApanelLocation',
            id          : 'toaLocation',
            stateId     :'locationStateId',
            stateful: true,
            stateEvents: ["columnmove", "columnresize", "sortchange", "show", "hide"],
            columnLines : true,
            overflow    :'auto',
            autoScroll  : true,
            singleSelect: true,         
            border      : true,                                     
            store       : LocationStore, //Associate with our store
            selType: 'checkboxmodel',
            title: 'Saved Service Locations',             
            frame :false,        
           
           dockedItems: [{
                xtype: 'toolbar',               
                dock: 'bottom',               
                items:[         
                    {
                        icon:'{!URLFOR($Resource.TOaImages, 'TOaImages/button_icon_4.png')}',// Use a URL in the icon config
                        //tooltip: 'Delete',
                        xtype: 'button',
                        id:'deleteLoc',
                        disabled:true,
                        text:'Delete',
                        dock: 'bottom',
                        minWidth: 80,
                        layout: {
                                pack: 'left'
                            },
                        handler : function() {
                                    var myGrid= Ext.getCmp('toaLocation');                                    
                                    var selectedRows = myGrid.getSelectionModel().getSelection();
                                    
                                    if(selectedRows.length)
                                    {
                                        var deletable=true;
                                        for(var i=0;i<selectedRows.length;i++)
                                        {
                                            if(selectedRows[i].data.Used==undefined || selectedRows[i].data.Used==null || selectedRows[i].data.Used=='')
                                              continue;
                                            else
                                            {
                                             deletable=false;
                                             break;
                                            }  
                                        }
                                        if(deletable==true)
                                        {
                                        Ext.Msg.show({
                                            title: 'Delete Confirmation'
                                            , msg: 'Are you sure you want to delete the selected Location(s)?'
                                            , buttons: Ext.Msg.YESNO
                                            , icon: Ext.Msg.QUESTION
                                            , fn: function(btnID, text, opt) {
                                                    if (btnID == 'yes') {                                    
                                                         LocationStore.remove(selectedRows);
                                                         var form = Ext.getCmp('locfrm').getForm();                                                   
                                                         form.reset();
                                                         Ext.getCmp('updateLocBtn').disable();
                                                         Ext.getCmp('addLocBtn').enable();
                                                    }
                                                    else
                                                    {
                                                         myGrid.getSelectionModel().deselectAll();
                                                    }
                                                } 
                                        }); 
                                        }
                                        else
                                        {
                                             Ext.Msg.alert('Delete Locations', 'You cannot delete locations which have vehicles associated with it. Kindly check the "Used" column to uncheck and retry.');
                                              myGrid.getSelectionModel().deselectAll();
                                        }   
                                    }                                   
                                    else
                                        Ext.Msg.alert('Status', 'Please select at least one record to delete!');
                         
                                }
                    }
                   ,'->',
               ]
           }
           ],          
           columns: [ 
               
               {
                    header: 'Used',
                    dataIndex:'Used',
                    locked   : true,
                    width       :50,
                    tooltip:'used in vehicle(s)',
                    renderer : function(value, meta) {
                        if(value!=null && value!=undefined && value.trim()!='') {
                            meta.style = "text-align: center;color:green;";
                            return value;
                        } else {
                            return value;
                        }
                    }   
               },
               
               {
                    header: 'Location Name',
                    dataIndex: 'LocationName',
                    width       :263,
                    locked   : true                  
               },
              
               {
                    header: 'Address Line 1',
                    dataIndex: 'GarageAddress1',
                    width       :263                
               },
               {
                    header: 'Address Line 2',
                    dataIndex: 'GarageAddress2',
                    width       :263                    
               },
                {
                    header: 'Country',
                    dataIndex: 'Country',
                    width       :150                            
                },               
               {
                    header: 'State/Province',
                    dataIndex: 'GarageState', 
                    width       :150         
                   
               }, 
               {
                    header: 'City',
                    dataIndex: 'GarageCity',
                    width       :150                  
                },
                {
                    header: 'Zip/Postal Code',
                    dataIndex: 'Zip',
                    width       :150                 
               }, 
               
               {
                    header: 'Contact Name',
                    dataIndex: 'ContactName',
                    width       :150                  
               },
               
               {
                    header: 'Email',
                    dataIndex: 'Email',
                    width       :150                   
               }, 
               
               {
                    header: 'Phone',
                    dataIndex: 'Phone',
                    width       :150                  
               },
                {
                    header: 'Alternate Contact Name',
                    dataIndex: 'AltContactName',
                    width       :150                  
               },
               
               {
                    header: 'Alternate Email',
                    dataIndex: 'AltEmail',
                    width       :150                   
               }, 
               
               {
                    header: 'Alternate Phone',
                    dataIndex: 'AltPhone',
                    width       :150                  
               }

          ]  
              
        }); //location grid
        function getGirdDataFromStore(LocationStore){         
             var data = [];
            LocationStore.each(function(r){
              data.push(r.data);
            });
            var jsonData = JSON.stringify(data);      
            return jsonData;
        }
        function getLineItemDataFromStore(PurchasedServiceStore){         
             var data = [];
            PurchasedServiceStore.each(function(r){
              data.push(r.data);
            });
            var jsonData = JSON.stringify(data);      
            return jsonData;
        }
        
         function getOrderDataFromStore(OrderStore){         
             var data = [];
            OrderStore.each(function(r){
              data.push(r.data);
            });
            var jsonData = JSON.stringify(data);      
            return jsonData;
        }
        
        var recs=[];
        VehicleStore.loadData(recs);
       
         Ext.define('Ext.TOA.TOApanelVehicle', { //Defining a panel in order to display our data
         extend      : 'Ext.grid.Panel',
         alias       : 'widget.TOApanelVehicle',
         title       : 'Service Information by Vehicle',
         //header      : true,
         name        : 'TOApanelVehicle',
         id          : 'toaVehicle',
         //stateId   : 'VehicleStateId',
         stateful: true,
         stateEvents: ["columnmove", "columnresize", "sortchange", "show", "hide"],
         columnLines : true,
         overflow    :'auto',
         autoScroll  : true,
         singleSelect: true,   
               
         //border      : false,
         //height      : 20,
         //width       : 1360,  
         border:true,
         margin:'0 0 0 2',            
         store       : VehicleStore, //Associate with our store
         selType: 'checkboxmodel',        
         frame :false,  
              
           
         
         bbar: [{
                text: 'Delete',
                id:'deleteVeh',
                disabled:true,
                icon:'{!URLFOR($Resource.TOaImages, 'TOaImages/button_icon_4.png')}',
                //tooltip:'Delete Vehilce',
                handler : function() {
                                                
                var selectedRows = Ext.getCmp('toaVehicle').getSelectionModel().getSelection();
                
                                    
                if(selectedRows.length < 1)
                 Ext.Msg.alert('Status', 'Please select at least one record to delete!');
                 //Ext.getCmp('deleteVeh').disable();
                else
                {
                Ext.Msg.show({
                title: 'Delete Confirmation'
                , msg: 'Are you sure you want to delete the selected Vehicle(s)?'
                , buttons: Ext.Msg.YESNO
                , icon: Ext.Msg.QUESTION
                , fn: function(btnID, text, opt) {
                        if (btnID == 'yes') {                                    
                            var selectedRowIndexes = [];

                // returns an array of selected records
                var selectedrecords = Ext.getCmp('toaVehicle').getSelectionModel().getSelection(); 

                Ext.iterate(selectedrecords, function(banner, index) {
                // push the row indexes into your array
                selectedRowIndexes.push(Ext.getCmp('toaVehicle').getStore().indexOf(banner)); 
                }); 
                for(var k=0;k<selectedRowIndexes.length;k++)
                {
                    var oldservice=VehicleStore.getAt(selectedRowIndexes[k]).data.Service;
                    var oldHarness=VehicleStore.getAt(selectedRowIndexes[k]).data.Harness;
                    var oldDeviceType=VehicleStore.getAt(selectedRowIndexes[k]).data.DeviceType;
                    var oldAccessories=VehicleStore.getAt(selectedRowIndexes[k]).data.Accessories;
                     var sensor1=VehicleStore.getAt(selectedRowIndexes[k]).data.Sensor1;
                    var sensor2=VehicleStore.getAt(selectedRowIndexes[k]).data.Sensor2;
                    var sensor3=VehicleStore.getAt(selectedRowIndexes[k]).data.Sensor3;
                    var sensor4=VehicleStore.getAt(selectedRowIndexes[k]).data.Sensor4;
                    var sensor5=VehicleStore.getAt(selectedRowIndexes[k]).data.Sensor5;
                    var sensor6=VehicleStore.getAt(selectedRowIndexes[k]).data.Sensor6;
                    if(sensor1!=null && sensor1!=undefined && sensor1.trim()!='')
                    {                    
                        addBalaceBackSensor(oldservice,'sensor1');                    
                    }
                    if(sensor2!=null && sensor2!=undefined && sensor2.trim()!='')
                    {
                        addBalaceBackSensor(oldservice,'sensor2');
                    }
                    if(sensor3!=null && sensor3!=undefined && sensor3.trim()!='')
                    {
                        addBalaceBackSensor(oldservice,'sensor3');
                    }
                    if(sensor4!=null && sensor4!=undefined && sensor4.trim()!='')
                    {
                        addBalaceBackSensor(oldservice,'sensor4');
                    }
                    if(sensor5!=null && sensor5!=undefined && sensor5.trim()!='')
                    {
                        addBalaceBackSensor(oldservice,'sensor5');
                    }
                    if(sensor6!=null && sensor6!=undefined && sensor6.trim()!='')
                    {
                        addBalaceBackSensor(oldservice,'sensor6');
                    }
                    addBalaceBack(oldservice,oldHarness,oldDeviceType,oldAccessories);
                    rePopulateStores(oldservice,oldHarness,oldDeviceType,oldAccessories);
                }  
                var arr = [];
              
                                    var locName = VehicleStore.getAt(selectedRowIndexes[0]).data.LocationName;
                                    //IT-698 - Fix - decodeHTML
                                    var recIndex = LocationStore.find('LocationName',decodeHtml(locName));
                    
                VehicleStore.remove(selectedrecords);
                var veharr=[];
                 VehicleStore.each(function(r)
                    {
                          if(r.data.LocationName == locName)
                          {
                                veharr.push(r.data);
                          }
                    });
                      LocationStore.getAt(recIndex).set('vehicles',veharr);
                    if(veharr.length>0)
                        LocationStore.getAt(recIndex).set('Used','('+veharr.length+')');
                    else
                        LocationStore.getAt(recIndex).set('Used','');
              
                 checkForSubmitEnable(); 
                        }
                        else
                        {
                           
                            Ext.getCmp('toaVehicle').getSelectionModel().deselectAll();
                        }
                    } 
                }); 
                }            
                }
            }],       
         columns: [ 
               
             {
                 header: 'Location Name',
                 dataIndex: 'LocationName',
                 width       :100,
                 locked   : true
                 
             },
             {
                 header: 'Service',
                 dataIndex: 'Service',
                 width       :100,
                 locked   : true
                
             },
             {
                 header: 'VIN',
                 dataIndex: 'VIN',
                 width       :50,
                 
                 locked   : true
                
             },
             {
                 header: 'Vehicle Label',
                 dataIndex: 'VehicleLabel', 
                 width       :80, 
                 locked   : true          
                
             }, 
             {
                 header: 'OLD VIN(transfer)',
                 dataIndex: 'OLDVIN',
                 width       :100
                           
             },
             {
                 header: 'Old Vehicle Label',
                 dataIndex: 'OldVehicleLabel',
                 width       :100
                 
             }, 
             {
                 header: 'Year',
                 dataIndex: 'Year',
                 width       :50
                 
             }, 
             {
                 header: 'Make',
                 dataIndex: 'Make',
                 width       :50
                
             },   
             {
                 header: 'Model',
                 dataIndex: 'Model',
                 width       :60
                 
             },  
             {
                 header: 'License Plate',
                 dataIndex: 'LicensePlate',
                 width       :80
                 
             },  
             {
                 header: 'License State',
                 dataIndex: 'LicenseState',
                 width       :80
                 
             },  
             {
                 header: 'Color',
                 dataIndex: 'Color',
                 width       :50
                 
             },   
             {
                 header: 'Fuel Type',
                 dataIndex: 'FuelType',
                 width       :80
                 
             },  
             {
                 header: 'Device Type',
                 dataIndex: 'DeviceType',
                 width       :100               
             },    
             {
                 header: 'Serial',
                 dataIndex: 'Serial',
                 width       :50
                 
             },  
             {
                 header: 'Old Serial',
                 dataIndex: 'OldSerial',
                 width       :70
                 
             },  
             {
                 header: 'Harness',
                 dataIndex: 'Harness',
                 width       :70
                 
             },  
             {
                 header: 'Accessories',
                 dataIndex: 'Accessories',
                 width       :80
                
             },
             {
                 header: 'Device Return To',
                 dataIndex: 'DeviceReturn',
                 width       :80
                 
             },
             {
                 header: 'Sensor1',
                 dataIndex: 'Sensor1',
                 width       :80
                
             },
             {
                 header: 'Sensor2',
                 dataIndex: 'Sensor2',
                 width       :80
                
             },
             {
                 header: 'Sensor3',
                 dataIndex: 'Sensor3',
                 width       :80
                 
             },
             {
                 header: 'Sensor4',
                 dataIndex: 'Sensor4',
                 width       :80
                
             },
             {
                 header: 'Sensor5',
                 dataIndex: 'Sensor5',
                 width       :80
                
             },
             {
                 header: 'Sensor6',
                 dataIndex: 'Sensor6',
                 width       :80
                
             },
             {
                 header: 'Notes',
                 dataIndex: 'Notes',
                 width       :100
                 
             }               
                                                        

          ]  
           //renderTo:gridSpace       
        }); //vehicle grid
            
</script>
<iframe onload="loaded();" style="width:500px;height:0px;display:none;" id="iframe_id" name="next"></iframe>
  <site:previewAsAdmin ></site:previewAsAdmin>  
 </apex:page>